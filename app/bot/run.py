# app/bot/run.py - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.bot import register_handlers
from app.bot.middleware.logger_middleware import MessageLoggerMiddleware
from app.core.config import settings
from app.core.db import Base, SessionLocal, engine
from app.core.logger import logger
from app.models import *

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∑–∞–¥–∞—á
from app.tasks.yield_scheduler import YieldScheduler
from app.tasks.smart_trade_scheduler import SmartTradeScheduler
from app.tasks.yield_finalizer import YieldFinalizer
from app.tasks.update_rates import periodic_rate_updater
from app.tasks.withdraw_monitor import withdraw_monitor_loop
from app.tasks.investment_transfers import process_pending_transfers_loop

# –°–æ–∑–¥–∞—ë–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
Base.metadata.create_all(bind=engine)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(
    token=settings.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
register_handlers(dp)

# Middleware
dp.message.middleware(MessageLoggerMiddleware())


async def main():
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏")

    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏
    yield_scheduler = YieldScheduler(bot)  # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    trade_scheduler = SmartTradeScheduler(bot)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–æ–≤
    yield_finalizer = YieldFinalizer(bot)  # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è

    # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(yield_scheduler.yield_scheduler_loop())  # –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –≤ 18:00
    asyncio.create_task(trade_scheduler.trade_generator_loop())  # –£–º–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–æ–≤
    asyncio.create_task(yield_finalizer.finalization_loop())  # –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –≤ 18:00
    asyncio.create_task(withdraw_monitor_loop())  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–æ–≤
    asyncio.create_task(periodic_rate_updater())  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
    asyncio.create_task(process_pending_transfers_loop())  # –¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã

    logger.success("üöÄ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω—ã")

    # –°—Ç–∞—Ä—Ç polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())