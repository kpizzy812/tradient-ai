import asyncio
from datetime import datetime, time

import pytz
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.bot import register_handlers
from app.bot.middleware.logger_middleware import MessageLoggerMiddleware
from app.core.config import settings
from app.core.db import Base, SessionLocal, engine
from app.core.logger import logger
from app.models import *  # –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –≤ models/__init__.py –±—ã–ª–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
from app.tasks.update_rates import periodic_rate_updater
from app.tasks.withdraw_monitor import withdraw_monitor_loop
from app.tasks.yield_distributor import distribute_full_yield
from app.models.deposit_request import DepositRequest
from app.models.investments import Investment
from app.models.users import User
from app.models.withdraw_request import WithdrawRequest
from app.models.daily_yield import DailyYield  # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –º–æ–¥–µ–ª—å
from app.tasks.generate_trades import trade_loop
from app.services.yielding import generate_and_record_daily_yield
from app.bot.handlers.yield_report import post_daily_yield
from app.tasks.investment_transfers import process_pending_transfers_loop

# –°–æ–∑–¥–∞—ë–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
Base.metadata.create_all(bind=engine)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(
    token=settings.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()
# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏–∑ –ø–∞–ø–∫–∏ handlers/
register_handlers(dp)
# Middleware
dp.message.middleware(MessageLoggerMiddleware())

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
msk = pytz.timezone("Europe/Moscow")
YIELD_TIME = time(18, 0)  # 18:00 –ø–æ –ú–°–ö
CHECK_INTERVAL = 30  # —Å–µ–∫—É–Ω–¥

last_processed_date = None

async def yield_scheduler():
    global last_processed_date
    logger.info("üéØ yield_scheduler –∑–∞–ø—É—â–µ–Ω")

    while True:
        now_msk = datetime.now(msk)
        today = now_msk.date()
        hour, minute = now_msk.hour, now_msk.minute

        if (
            hour == YIELD_TIME.hour and
            minute == YIELD_TIME.minute and
            last_processed_date != today
        ):
            last_processed_date = today

            try:
                logger.info(f"[{today}] ‚õèÔ∏è –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
                await distribute_full_yield(bot)

                logger.info(f"[{today}] üßÆ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")
                generate_and_record_daily_yield()

                logger.info(f"[{today}] üì£ –ü—É–±–ª–∏–∫—É–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ Telegram...")
                await post_daily_yield(bot)

                logger.success(f"[{today}] ‚úÖ –ü–æ—Å—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"[{today}] ‚ùå –û—à–∏–±–∫–∞ –≤ yield_scheduler: {e}")
        else:
            logger.debug(
                f"‚è≥ –ü–æ–∫–∞ –Ω–µ –≤—Ä–µ–º—è. –°–µ–π—á–∞—Å {hour}:{minute}, —É–∂–µ –±—ã–ª–æ: {last_processed_date == today}"
            )

        await asyncio.sleep(CHECK_INTERVAL)


# async def yield_scheduler():
#     while True:
#         try:
#             now_msk = datetime.now(msk)
#             logger.info(f"[{now_msk}] ‚è± –¢–ï–°–¢–û–í–û–ï –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞...")
#
#             await distribute_full_yield(bot)
#
#             logger.info(f"[{now_msk}] ‚è± –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –≤—á–µ—Ä–∞...")
#             generate_and_record_daily_yield()
#
#             logger.info(f"[{now_msk}] ‚è± –ü—É–±–ª–∏–∫—É–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ Telegram...")
#             await post_daily_yield(bot)
#
#             logger.success(f"[{now_msk}] ‚úÖ –ü–æ—Å—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
#         except Exception as e:
#             logger.error(f"[{now_msk}] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º yield_scheduler: {e}")
#
#         await asyncio.sleep(120)  # –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã


async def main():
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏")
    # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(yield_scheduler())
    asyncio.create_task(withdraw_monitor_loop())
    asyncio.create_task(periodic_rate_updater())
    asyncio.create_task(trade_loop())
    asyncio.create_task(process_pending_transfers_loop())
    # –°—Ç–∞—Ä—Ç polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
