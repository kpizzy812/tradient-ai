import asyncio
from datetime import datetime, time
import pytz
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from app.bot import register_handlers
from app.bot.middleware.logger_middleware import MessageLoggerMiddleware
from app.core.config import settings
from app.core.db import Base, SessionLocal, engine
from app.core.logger import logger
from app.models import *  # –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –≤ models/__init__.py –±—ã–ª–∏ –≤—Å–µ –∏–º–ø–æ—Ä—Ç—ã
from app.tasks.update_rates import periodic_rate_updater
from app.tasks.withdraw_monitor import withdraw_monitor_loop
from app.tasks.yield_distributor import distribute_full_yield
from app.tasks.generate_trades import trade_loop
from app.tasks.investment_transfers import process_pending_transfers_loop

# –°–æ–∑–¥–∞—ë–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
Base.metadata.create_all(bind=engine)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(
    token=settings.BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –≤–∞—à–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏–∑ –ø–∞–ø–∫–∏ handlers/
register_handlers(dp)


# Middleware
dp.message.middleware(MessageLoggerMiddleware())

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
msk = pytz.timezone("Europe/Moscow")
YIELD_TIME = time(18, 0)  # 18:00 –ø–æ –ú–°–ö
CHECK_INTERVAL = 60  # —Å–µ–∫—É–Ω–¥
DIAGNOSTIC_INTERVAL = 30 * 60  # –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç

last_processed_date = None
last_diagnostic = None


async def improved_yield_scheduler():
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
    global last_processed_date
    logger.info("üéØ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")

    while True:
        try:
            now_msk = datetime.now(msk)
            today = now_msk.date()
            hour, minute = now_msk.hour, now_msk.minute

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (18:00-18:05)
            if (
                    hour == YIELD_TIME.hour and
                    0 <= minute <= 5 and  # 5-–º–∏–Ω—É—Ç–Ω–æ–µ –æ–∫–Ω–æ
                    last_processed_date != today
            ):
                last_processed_date = today
                logger.info(f"[{today}] üöÄ –ó–∞–ø—É—Å–∫ —Ä—É—Ç–∏–Ω—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏...")

                try:
                    from app.bot.handlers.yield_report import daily_yield_routine
                    success = await daily_yield_routine(bot)

                    if success:
                        logger.success(f"[{today}] ‚úÖ –†—É—Ç–∏–Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        logger.error(f"[{today}] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä—É—Ç–∏–Ω–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
                        for admin_id in settings.ADMIN_TG_IDS:
                            try:
                                await bot.send_message(
                                    admin_id,
                                    f"‚ùå –û—à–∏–±–∫–∞ —Ä—É—Ç–∏–Ω—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞ {today}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ /yield_routine"
                                )
                            except:
                                pass

                except Exception as e:
                    logger.error(f"[{today}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

                    # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
                    for admin_id in settings.ADMIN_TG_IDS:
                        try:
                            await bot.send_message(
                                admin_id,
                                f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏!\n\n–û—à–∏–±–∫–∞: {e}\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ!"
                            )
                        except:
                            pass

            else:
                logger.debug(
                    f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏. –°–µ–π—á–∞—Å: {hour:02d}:{minute:02d}, "
                    f"–æ–±—Ä–∞–±–æ—Ç–∞–Ω: {last_processed_date == today}"
                )

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

        await asyncio.sleep(CHECK_INTERVAL)


async def diagnostic_scheduler():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    global last_diagnostic
    logger.info("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

    while True:
        try:
            now = datetime.utcnow()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            if last_diagnostic is None or (now - last_diagnostic).seconds >= DIAGNOSTIC_INTERVAL:
                last_diagnostic = now

                from app.bot.handlers.admin.yield_management import auto_diagnostic_check
                await auto_diagnostic_check(bot)

                logger.debug("üîç –ê–≤—Ç–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")

        await asyncio.sleep(DIAGNOSTIC_INTERVAL)


# –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
async def test_yield_scheduler():
    """–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ - –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã"""
    logger.warning("üß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã")

    while True:
        try:
            now_msk = datetime.now(msk)
            logger.info(f"[{now_msk}] üß™ –¢–ï–°–¢: –ó–∞–ø—É—Å–∫ —Ä—É—Ç–∏–Ω—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏...")

            from app.bot.handlers.yield_report import daily_yield_routine
            success = await daily_yield_routine(bot)

            if success:
                logger.success(f"[{now_msk}] üß™ –¢–ï–°–¢: –†—É—Ç–∏–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.error(f"[{now_msk}] üß™ –¢–ï–°–¢: –û—à–∏–±–∫–∞ –≤ —Ä—É—Ç–∏–Ω–µ")

        except Exception as e:
            logger.error(f"üß™ –¢–ï–°–¢: –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")

        await asyncio.sleep(120)  # –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã


async def startup_diagnostic():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    try:
        logger.info("üîç –ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")

        from app.services.yielding import validate_system_health, get_recent_yields

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        is_healthy = validate_system_health()

        if is_healthy:
            logger.success("‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            recent = get_recent_yields(3)
            for date, pct in recent:
                status = "‚úÖ" if 2.0 <= pct <= 5.0 else "‚ö†Ô∏è"
                logger.info(f"{status} {date}: {pct}%")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –∑–∞–ø—É—Å–∫–µ
        startup_msg = (
            f"ü§ñ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω</b>\n\n"
            f"üìä –°–∏—Å—Ç–µ–º–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {'‚úÖ –ò—Å–ø—Ä–∞–≤–Ω–∞' if is_healthy else '‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã'}\n"
            f"‚è∞ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: 18:00 –ú–°–ö\n"
            f"üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚Ä¢ /yield_status - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            f"‚Ä¢ /yield_post - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n"
            f"‚Ä¢ /yield_manual - —Ä—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è\n"
            f"‚Ä¢ /trade_generate - —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–π–¥\n"
            f"‚Ä¢ /day_stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è"
        )

        for admin_id in settings.ADMIN_TG_IDS:
            try:
                await bot.send_message(admin_id, startup_msg, parse_mode="HTML")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")


async def main():
    logger.info("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏")

    # –°—Ç–∞—Ä—Ç–æ–≤–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    await startup_diagnostic()

    # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    asyncio.create_task(improved_yield_scheduler())  # –û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    # asyncio.create_task(test_yield_scheduler())    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    asyncio.create_task(diagnostic_scheduler())  # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    asyncio.create_task(withdraw_monitor_loop())  # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–≤–æ–¥–æ–≤
    asyncio.create_task(periodic_rate_updater())  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
    asyncio.create_task(trade_loop())  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–æ–≤
    asyncio.create_task(process_pending_transfers_loop())  # –¢—Ä–∞–Ω—Å—Ñ–µ—Ä—ã

    # –°—Ç–∞—Ä—Ç polling
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())