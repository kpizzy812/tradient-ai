from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from app.core.config import settings
from app.services.logic import t
from app.bot.states.admin import AdminStates
from app.bot.keyboards.admin import get_admin_menu_kb
from app.core.db import SessionLocal
from app.models.users import User
from app.models.investments import Investment

router = Router()


@router.message(F.text == "/admin")
async def cmd_admin(msg: Message, state: FSMContext):
    if msg.from_user.id not in settings.ADMIN_TG_IDS:
        await msg.answer(t("not_admin", msg.from_user.language_code))
        return

    await msg.answer(
        t("admin_panel", msg.from_user.language_code),
        reply_markup=get_admin_menu_kb()
    )
    await state.set_state(AdminStates.menu)


@router.callback_query(StateFilter(AdminStates.menu), F.data == "admin_users")
async def callback_admin_users(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ TG ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:")
    await state.set_state(AdminStates.user_input_id)


from app.services.user_stats import (
    get_root_referrer,
    get_referral_counts,
    get_active_referrals_count,
    get_total_deposits,
    get_total_withdrawals,
)

@router.message(StateFilter(AdminStates.user_input_id))
async def process_user_id(msg: Message, state: FSMContext):
    try:
        user_tg_id = int(msg.text.strip())
    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π TG ID. –í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        return

    db = SessionLocal()
    user = db.query(User).filter(User.tg_id == user_tg_id).first()
    db.close()

    if not user:
        await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_admin_menu_kb())
        await state.clear()
        return

    await show_user_card(msg, user_tg_id)
    await state.set_state(AdminStates.user_detail)



@router.callback_query(F.data.startswith("user_edit_ref:"))
async def edit_referrer_prompt(call: CallbackQuery, state: FSMContext):
    tg_id = int(call.data.split(":")[1])
    await state.update_data(editing_user_tg=tg_id)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π TG ID –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è:")
    await state.set_state(AdminStates.editing_referrer)

@router.message(StateFilter(AdminStates.editing_referrer))
async def edit_referrer_save(msg: Message, state: FSMContext):
    db = SessionLocal()
    data = await state.get_data()
    target_tg_id = data.get("editing_user_tg")

    new_ref_tg = msg.text.strip()
    if not new_ref_tg.isdigit():
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ TG ID —á–∏—Å–ª–æ–º.")
        return

    target_user = db.query(User).filter(User.tg_id == target_tg_id).first()
    new_ref = db.query(User).filter(User.tg_id == int(new_ref_tg)).first()

    if not target_user or not new_ref:
        db.close()
        await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏–∫–ª
    current = new_ref
    while current:
        if current.id == target_user.id:
            db.close()
            await msg.answer("‚ùå –ù–µ–ª—å–∑—è —É–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è –∏–ª–∏ –Ω–∏–∂–µ –ø–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ.")
            await state.clear()
            return
        current = db.query(User).filter(User.id == current.referrer_id).first()

    target_user.referrer_id = new_ref.id
    db.commit()
    db.close()

    await msg.answer("‚úÖ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()


@router.callback_query(F.data.startswith("user_edit_balance:"))
async def edit_balance_prompt(call: CallbackQuery, state: FSMContext):
    tg_id = int(call.data.split(":")[1])
    await state.update_data(editing_user_tg=tg_id)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤ USD:")
    await state.set_state(AdminStates.editing_balance)


@router.message(StateFilter(AdminStates.editing_balance))
async def edit_balance_save(msg: Message, state: FSMContext):
    db = SessionLocal()
    data = await state.get_data()
    target_tg_id = data.get("editing_user_tg")

    try:
        new_balance = float(msg.text.strip())
    except ValueError:
        await msg.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º.")
        return

    user = db.query(User).filter(User.tg_id == target_tg_id).first()
    if not user:
        db.close()
        await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    user.profit_usd = round(new_balance, 2)
    db.commit()
    db.close()

    await msg.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {new_balance:.2f} USD")
    await state.clear()


@router.callback_query(F.data.startswith("user_edit_pool:"))
async def edit_pool_prompt(call: CallbackQuery, state: FSMContext):
    tg_id = int(call.data.split(":")[1])
    await state.update_data(editing_user_tg=tg_id)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="Basic", callback_data="set_pool:Basic")],
            [InlineKeyboardButton(text="Smart", callback_data="set_pool:Smart")],
            [InlineKeyboardButton(text="Pro", callback_data="set_pool:Pro")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_back")]
        ]
    )

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–ª, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", reply_markup=kb)
    await state.set_state(AdminStates.editing_pool)


from datetime import datetime
from app.models.investments import Investment

@router.callback_query(StateFilter(AdminStates.editing_pool), F.data.startswith("set_pool:"))
async def save_selected_pool(call: CallbackQuery, state: FSMContext):
    db = SessionLocal()
    data = await state.get_data()
    target_tg_id = data.get("editing_user_tg")
    pool_name = call.data.split(":")[1]

    user = db.query(User).filter(User.tg_id == target_tg_id).first()
    if not user:
        db.close()
        await call.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    exists = db.query(Investment).filter_by(user_id=user.id, pool_name=pool_name, is_active=True).first()
    if exists:
        db.close()
        await call.message.edit_text(f"‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ –ø—É–ª–µ {pool_name}.")
        await state.clear()
        return

    investment = Investment(
        user_id=user.id,
        pool_name=pool_name,
        amount_usd=0.0,
        is_active=True,
        included_today=False,
        created_at=datetime.utcnow()
    )
    db.add(investment)
    db.commit()
    db.close()

    await call.message.edit_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –ø—É–ª: {pool_name}")
    await state.clear()



@router.callback_query(F.data.startswith("user_partners:"))
async def choose_ref_level(call: CallbackQuery, state: FSMContext):
    tg_id = int(call.data.split(":")[1])
    await state.update_data(editing_user_tg=tg_id)

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="1 —É—Ä–æ–≤–µ–Ω—å", callback_data="ref_level:1"),
                InlineKeyboardButton(text="2", callback_data="ref_level:2"),
                InlineKeyboardButton(text="3", callback_data="ref_level:3"),
            ],
            [
                InlineKeyboardButton(text="4", callback_data="ref_level:4"),
                InlineKeyboardButton(text="5", callback_data="ref_level:5"),
                InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_back"),
            ],
        ]
    )

    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤:", reply_markup=kb)
    await state.set_state(AdminStates.choosing_ref_level)


@router.callback_query(StateFilter(AdminStates.choosing_ref_level), F.data.startswith("ref_level:"))
async def show_partners_by_level(call: CallbackQuery, state: FSMContext):
    db = SessionLocal()
    data = await state.get_data()
    target_user = db.query(User).filter(User.tg_id == data.get("editing_user_tg")).first()
    level = int(call.data.split(":")[1])

    users = []
    current_level = [target_user]
    for _ in range(level):
        next_level = []
        for u in current_level:
            children = db.query(User).filter(User.referrer_id == u.id).all()
            next_level.extend(children)
        current_level = next_level
    users = current_level

    active_users = [u for u in users if u.deposit_usd > 0]
    inactive_users = [u for u in users if u.deposit_usd == 0]

    def format_user(u):
        return f"@{u.username or '‚Äî'} (`{u.tg_id}`) {'‚úÖ' if u.deposit_usd > 0 else '‚ùå'}"

    text = f"<b>–ü–∞—Ä—Ç–Ω—ë—Ä—ã {level} —É—Ä–æ–≤–Ω—è:</b>\n\n"
    for u in active_users + inactive_users:
        text += format_user(u) + "\n"

    if not users:
        text = f"‚ùå –ü–∞—Ä—Ç–Ω—ë—Ä–æ–≤ {level} —É—Ä–æ–≤–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"user_partners:{target_user.tg_id}")],
            [InlineKeyboardButton(text="–í –º–µ–Ω—é", callback_data="admin_back")]
        ]
    )

    db.close()
    await call.message.edit_text(text, reply_markup=kb)



@router.callback_query(F.data.startswith("user_edit_menu:"))
async def show_user_edit_menu(call: CallbackQuery, state: FSMContext):
    tg_id = int(call.data.split(":")[1])
    await state.update_data(editing_user_tg=tg_id)

    user = SessionLocal().query(User).filter(User.tg_id == tg_id).first()

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –ò–∑–º. –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è", callback_data=f"user_edit_ref:{tg_id}")],
            [InlineKeyboardButton(text="üí∞ –ò–∑–º. –±–∞–ª–∞–Ω—Å", callback_data=f"user_edit_balance:{tg_id}")],
            [InlineKeyboardButton(text="üè¶ –ò–∑–º. –ø—É–ª", callback_data=f"user_edit_pool:{tg_id}")],
            [
                InlineKeyboardButton(
                    text="üîì –ê–Ω–±–∞–Ω" if getattr(user, "is_banned", False) else "‚õî –ë–∞–Ω",
                    callback_data=f"user_{'unban' if getattr(user, 'is_banned', False) else 'ban'}:{tg_id}"
                )
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"user_back:{tg_id}")]
        ]
    )

    await call.message.edit_text("üîß –ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb)



@router.callback_query(StateFilter(AdminStates.user_detail), F.data == "admin_back")
async def callback_admin_back(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        t("admin_panel", call.from_user.language_code),
        reply_markup=get_admin_menu_kb()
    )
    await state.set_state(AdminStates.menu)


async def show_user_card(message: Message | CallbackQuery, user_tg_id: int):
    db = SessionLocal()
    user = db.query(User).filter(User.tg_id == user_tg_id).first()
    if not user:
        db.close()
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    investments = db.query(Investment).filter(Investment.user_id == user.id, Investment.is_active == True).all()
    pools = {}
    for inv in investments:
        pools.setdefault(inv.pool_name, 0.0)
        pools[inv.pool_name] += inv.amount_usd

    total_deposit = get_total_deposits(db, user.id)
    total_withdraw = get_total_withdrawals(db, user.id)
    ref_counts = get_referral_counts(db, user)
    active_refs = get_active_referrals_count(db, user)
    referrer = db.query(User).filter(User.id == user.referrer_id).first()
    root_ref = get_root_referrer(db, user)
    db.close()

    pool_lines = "\n".join(f"üíº {name}: {amount:.2f} USD" for name, amount in pools.items() if amount > 0)
    ref_line = " ".join([f"{i}:{count}" for i, count in ref_counts.items()])

    text = (
        f"üë§ @{user.username or '‚Äî'} (`{user.tg_id}`)\n\n"
        f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {user.profit_usd:.2f} USD\n"
        + (f"{pool_lines}\n" if pool_lines else "") +
        f"üîº <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> {total_deposit:.2f} USD\n"
        f"üîΩ <b>–í—ã–≤–µ–¥–µ–Ω–æ:</b> {total_withdraw:.2f} USD\n\n"
        f"üë• <b>–ü–∞—Ä—Ç–Ω—ë—Ä—ã:</b> {ref_line}\n"
        f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> {active_refs}\n\n"
        + (
            f"üì• <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å:</b> @{referrer.username or '‚Äî'} (`{referrer.tg_id}`)\n"
            if referrer else ""
        )
        + f"üå≥ <b>–ì–ª–∞–≤–Ω—ã–π –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ:</b> @{root_ref.username or '‚Äî'} (`{root_ref.tg_id}`)\n"
        f"üåê <b>–Ø–∑—ã–∫:</b> {user.lang.upper()}"
    )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîß –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"user_edit_menu:{user.tg_id}")],
            [
                InlineKeyboardButton(text="üë• –ü–∞—Ä—Ç–Ω–µ—Ä—ã", callback_data=f"user_partners:{user.tg_id}"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
            ]
        ]
    )

    if isinstance(message, CallbackQuery):
        await message.message.edit_text(text, reply_markup=kb)
    else:
        await message.answer(text, reply_markup=kb)

@router.callback_query(F.data.startswith("user_back:"))
async def return_to_user_card(call: CallbackQuery, state: FSMContext):
    user_tg_id = int(call.data.split(":")[1])
    await show_user_card(call, user_tg_id)
    await state.set_state(AdminStates.user_detail)