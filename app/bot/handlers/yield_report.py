# app/bot/handlers/yield_report.py

from aiogram import Bot
from aiogram.enums import ParseMode
from app.core.config import settings
from app.models.daily_yield import DailyYield
from sqlalchemy import select
from app.core.db import SessionLocal
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from app.core.logger import logger

photo_url = "https://i.ibb.co/mrrB7XWh/Chat-GPT-Image-31-2025-15-35-19.jpg"


def format_yield_post(date: datetime, percent: float):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ—Å—Ç –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
    d = date.strftime("%d.%m.%Y")

    # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if percent >= 4.5:
        trend_emoji = "üöÄüî•"
    elif percent >= 3.5:
        trend_emoji = "üìà‚ú®"
    elif percent >= 2.0:
        trend_emoji = "üìä‚úÖ"
    elif percent >= 1.0:
        trend_emoji = "üìâ‚ö°"
    else:
        trend_emoji = "‚ö†Ô∏èüìä"

    text = (
        f"{trend_emoji} <b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å Tradient AI –∑–∞ {d}</b>\n"
        f"üìà –í—Å–µ–≥–æ: <b>{percent}%</b>\n\n"
        f"{trend_emoji} <b>Tradient AI Yield for {d}</b>\n"
        f"üìà Total: <b>{percent}%</b>\n\n"
        f"üöÄ <b>Launch your AI trading now üëá</b>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="EARN WITH AI", url="https://t.me/TradientBot?startapp")]
    ])

    media = InputMediaPhoto(media=photo_url, caption=text, parse_mode="HTML")

    return media, keyboard


async def post_daily_yield(bot: Bot, target_date=None):
    """
    –ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –æ —Å—É—Ç–æ—á–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    """
    db = SessionLocal()
    try:
        if target_date is None:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ—Ä–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å
            now_msk = datetime.utcnow() + timedelta(hours=3)
            target_date = (now_msk - timedelta(days=1)).date()

        # –ò—â–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        record = db.execute(
            select(DailyYield).where(DailyYield.date == target_date)
        ).scalar_one_or_none()

        if not record:
            logger.error(f"[YIELD_POST] ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞ {target_date}")
            return False

        logger.info(f"[YIELD_POST] üì§ –ü—É–±–ª–∏–∫—É–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ {target_date}: {record.base_yield}%")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ—Å—Ç
        media, keyboard = format_yield_post(target_date, record.base_yield)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å—Ç
        msg = await bot.send_photo(
            chat_id=settings.PROJECT_CHAT_ID,
            message_thread_id=settings.DAILY_YIELD_TOPIC_ID,
            photo=media.media,
            caption=media.caption,
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )

        # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await bot.pin_chat_message(
                chat_id=settings.PROJECT_CHAT_ID,
                message_id=msg.message_id,
                disable_notification=True
            )
            logger.success(f"[YIELD_POST] üìå –ü–æ—Å—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω: {msg.message_id}")
        except Exception as e:
            logger.warning(f"[YIELD_POST] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä–µ–ø–∏—Ç—å –ø–æ—Å—Ç: {e}")

        logger.success(f"[YIELD_POST] ‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {record.base_yield}%")
        return True

    except Exception as e:
        logger.error(f"[YIELD_POST] ‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False
    finally:
        db.close()


async def post_manual_yield(bot: Bot, date_str: str, percent: float):
    """
    –†—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π)
    """
    try:
        date = datetime.strptime(date_str, "%Y-%m-%d").date()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –µ—Å–ª–∏ –Ω–µ—Ç
        db = SessionLocal()
        existing = db.execute(
            select(DailyYield).where(DailyYield.date == date)
        ).scalar_one_or_none()

        if not existing:
            record = DailyYield(date=date, base_yield=percent)
            db.add(record)
            db.commit()
            logger.info(f"[YIELD_POST] üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: {date} = {percent}%")

        db.close()

        # –ü—É–±–ª–∏–∫—É–µ–º
        return await post_daily_yield(bot, date)

    except Exception as e:
        logger.error(f"[YIELD_POST] ‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        return False


async def daily_yield_routine(bot: Bot):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ä—É—Ç–∏–Ω–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ + –ø—É–±–ª–∏–∫–∞—Ü–∏—è
    """
    from app.services.yielding import generate_and_record_daily_yield, validate_system_health

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        if not validate_system_health():
            logger.warning("[YIELD_ROUTINE] ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        yield_pct = generate_and_record_daily_yield()

        if yield_pct is None:
            logger.error("[YIELD_ROUTINE] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å")
            return False

        # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
        success = await post_daily_yield(bot)

        if success:
            logger.success(f"[YIELD_ROUTINE] ‚úÖ –†—É—Ç–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ: {yield_pct}%")
        else:
            logger.error("[YIELD_ROUTINE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")

        return success

    except Exception as e:
        logger.error(f"[YIELD_ROUTINE] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä—É—Ç–∏–Ω–µ: {e}")
        return False


# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
async def admin_check_yield_system(bot: Bot, admin_id: int):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –∞–¥–º–∏–Ω–æ–≤"""
    from app.services.yielding import get_recent_yields, validate_system_health

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ
        is_healthy = validate_system_health()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        recent = get_recent_yields(5)

        status = "‚úÖ –ò—Å–ø—Ä–∞–≤–Ω–æ" if is_healthy else "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"

        report = f"üîç <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:</b> {status}\n\n"

        if recent:
            report += "üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π:</b>\n"
            for date, pct in recent:
                emoji = "‚úÖ" if 2.0 <= pct <= 5.0 else "‚ö†Ô∏è"
                report += f"{emoji} {date}: {pct}%\n"

            avg = sum(pct for _, pct in recent) / len(recent)
            report += f"\nüìà <b>–°—Ä–µ–¥–Ω—è—è:</b> {avg:.2f}%"
        else:
            report += "‚ùå <b>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏</b>"

        await bot.send_message(admin_id, report, parse_mode=ParseMode.HTML)

    except Exception as e:
        await bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")


async def admin_force_yield_post(bot: Bot, admin_id: int, date_str: str = None, percent: float = None):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –∞–¥–º–∏–Ω–æ–º"""
    try:
        if date_str and percent:
            # –†—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            success = await post_manual_yield(bot, date_str, percent)
        else:
            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞ –≤—á–µ—Ä–∞
            success = await post_daily_yield(bot)

        if success:
            await bot.send_message(admin_id, "‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            await bot.send_message(admin_id, "‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")

    except Exception as e:
        await bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")