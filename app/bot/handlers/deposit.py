from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery
from app.models.deposit_request import DepositRequest
from app.services.logic import invest_user, t
from app.core.db import SessionLocal
from app.models.users import User

router = Router()


@router.callback_query(F.data.startswith("approve_"))
async def callback_approve(call: CallbackQuery, bot: Bot):
    request_id = int(call.data.split("_")[1])
    db = SessionLocal()
    try:
        req = db.query(DepositRequest).get(request_id)
        if not req or req.status != "pending":
            return await call.answer("‚õîÔ∏è –ó–∞—è–≤–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)

        user = db.query(User).get(req.user_id)
        if not user:
            return await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

        if user.hold_balance > 0:
            total = req.amount_usd + user.hold_balance
            success = invest_user(db, user, total, req.pool_name, bot)
            user.hold_balance = 0.0
        else:
            success = invest_user(db, user, req.amount_usd, req.pool_name, bot)

        if success:
            req.status = "approved"
            db.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
            updated_text = call.message.text + f"\n\n‚úÖ <b>–û–î–û–ë–†–ï–ù–û</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{call.from_user.username or call.from_user.id}"
            await call.message.edit_text(updated_text, parse_mode="HTML")
            await call.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")

            try:
                await bot.send_message(user.tg_id, t("deposit_approved", user.lang))
            except:
                pass
        else:
            db.rollback()
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
    finally:
        db.close()


@router.callback_query(F.data.startswith("decline_"))
async def callback_decline(call: CallbackQuery, bot: Bot):
    request_id = int(call.data.split("_")[1])
    db = SessionLocal()
    try:
        req = db.query(DepositRequest).get(request_id)
        if not req or req.status != "pending":
            return await call.answer("‚õîÔ∏è –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", show_alert=True)

        req.status = "declined"
        db.commit()

        user = db.query(User).get(req.user_id)
        if user and user.hold_balance > 0:
            user.profit_usd += user.hold_balance
            user.hold_balance = 0.0
            db.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        updated_text = call.message.text + f"\n\n‚ùå <b>–û–¢–ö–õ–û–ù–ï–ù–û</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{call.from_user.username or call.from_user.id}"
        await call.message.edit_text(updated_text, parse_mode="HTML")
        await call.answer("üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")

        try:
            await bot.send_message(user.tg_id, t("deposit_declined", user.lang))
        except:
            pass

    finally:
        db.close()


@router.callback_query(F.data.startswith("delete_"))
async def callback_delete(call: CallbackQuery):
    request_id = int(call.data.split("_")[1])
    db = SessionLocal()
    try:
        req = db.query(DepositRequest).get(request_id)
        if not req:
            return await call.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        req.status = "deleted"
        db.commit()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
        updated_text = call.message.text + f"\n\nüóë <b>–£–î–ê–õ–ï–ù–û</b> –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º @{call.from_user.username or call.from_user.id}"
        await call.message.edit_text(updated_text, parse_mode="HTML")
        await call.answer("üóë –ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞")
    finally:
        db.close()