# app/bot/handlers/admin/deposits.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from sqlalchemy.orm import Session
from sqlalchemy import func, desc
from datetime import datetime, timedelta

from app.core.db import SessionLocal
from app.models.users import User
from app.models.deposit_request import DepositRequest
from app.bot.states.admin import AdminStates

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
ITEMS_PER_PAGE = 20


def get_deposit_filter_kb(current_filter="all"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∑–∞—è–≤–æ–∫"""
    filters = {
        "all": "–í—Å–µ",
        "pending": "–û–∂–∏–¥–∞—é—Ç",
        "approved": "–û–¥–æ–±—Ä–µ–Ω–æ",
        "declined": "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
        "deleted": "–£–¥–∞–ª–µ–Ω–æ"
    }

    buttons = []
    row = []
    for key, text in filters.items():
        mark = "‚úÖ " if key == current_filter else ""
        row.append(InlineKeyboardButton(
            text=f"{mark}{text}",
            callback_data=f"deposits_filter_{key}"
        ))
        if len(row) == 2:
            buttons.append(row)
            row = []

    if row:
        buttons.append(row)

    buttons.append([
        InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_menu")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_deposit_list_kb(page=0, total_pages=0, status_filter="all"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    buttons = []

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        nav_row = []
        if page > 0:
            nav_row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=f"deposits_page_{page - 1}_{status_filter}"
            ))

        nav_row.append(InlineKeyboardButton(
            text=f"{page + 1}/{total_pages}",
            callback_data="deposits_noop"
        ))

        if page < total_pages - 1:
            nav_row.append(InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=f"deposits_page_{page + 1}_{status_filter}"
            ))

        buttons.append(nav_row)

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    buttons.extend([
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"deposits_page_{page}_{status_filter}"),
            InlineKeyboardButton(text="üìä –§–∏–ª—å—Ç—Ä—ã", callback_data="admin_deposits")
        ],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_menu")]
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(F.data == "admin_deposits")
async def show_deposits_filters(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"""
    db = SessionLocal()

    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        stats = {}
        for status in ["pending", "approved", "declined", "deleted"]:
            count = db.query(DepositRequest).filter(DepositRequest.status == status).count()
            stats[status] = count

        total = db.query(DepositRequest).count()

        text = (
            "üìà <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total:,}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {stats['pending']:,}\n"
            f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {stats['approved']:,}\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['declined']:,}\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ: {stats['deleted']:,}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )

        await call.message.edit_text(text, reply_markup=get_deposit_filter_kb())
        await state.set_state(AdminStates.deposits_filter)

    finally:
        db.close()


@router.callback_query(StateFilter(AdminStates.deposits_filter), F.data.startswith("deposits_filter_"))
async def show_deposits_list(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º"""
    status_filter = call.data.split("_")[-1]
    await show_deposits_page(call, state, 0, status_filter)


@router.callback_query(F.data.startswith("deposits_page_"))
async def handle_deposits_pagination(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    parts = call.data.split("_")
    page = int(parts[2])
    status_filter = parts[3] if len(parts) > 3 else "all"
    await show_deposits_page(call, state, page, status_filter)


async def show_deposits_page(call: CallbackQuery, state: FSMContext, page: int, status_filter: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—è–≤–æ–∫"""
    db = SessionLocal()

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
        query = db.query(DepositRequest)

        if status_filter != "all":
            query = query.filter(DepositRequest.status == status_filter)

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_count = query.count()
        total_pages = (total_count + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

        if total_pages == 0:
            await call.message.edit_text(
                f"üìà <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ({status_filter})</b>\n\n"
                "üö´ –ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=get_deposit_filter_kb(status_filter)
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        requests = query.order_by(desc(DepositRequest.created_at)).offset(
            page * ITEMS_PER_PAGE
        ).limit(ITEMS_PER_PAGE).all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        status_names = {
            "pending": "‚è≥ –û–∂–∏–¥–∞—é—Ç",
            "approved": "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ",
            "declined": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
            "deleted": "üóë –£–¥–∞–ª–µ–Ω–æ",
            "all": "üìà –í—Å–µ –∑–∞—è–≤–∫–∏"
        }

        text = f"{status_names.get(status_filter, 'üìà –ó–∞—è–≤–∫–∏')} –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏
        for i, req in enumerate(requests, 1):
            user = db.query(User).filter(User.id == req.user_id).first()
            username = f"@{user.username}" if user and user.username else f"ID{user.tg_id if user else 'N/A'}"

            status_emoji = {
                "pending": "‚è≥",
                "approved": "‚úÖ",
                "declined": "‚ùå",
                "deleted": "üóë"
            }.get(req.status, "‚ùì")

            text += (
                f"<b>{page * ITEMS_PER_PAGE + i}.</b> {status_emoji} {username}\n"
                f"üí∞ ${req.amount_usd:.2f} ‚Üí {req.pool_name}\n"
                f"üí≥ {req.method}"
            )

            if req.currency:
                text += f" ({req.currency})"

            text += f"\nüïí {req.created_at.strftime('%d.%m.%Y %H:%M')}\n"

            if req.details:
                details = req.details[:50] + "..." if len(req.details) > 50 else req.details
                text += f"üìù <code>{details}</code>\n"

            text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages} | –í—Å–µ–≥–æ: {total_count}"

        await call.message.edit_text(
            text,
            reply_markup=get_deposit_list_kb(page, total_pages, status_filter),
            parse_mode="HTML"
        )
        await state.set_state(AdminStates.deposits_list)

    finally:
        db.close()


@router.callback_query(F.data == "deposits_noop")
async def deposits_noop(call: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await call.answer()