# app/bot/handlers/admin/yield_commands.py - –ù–û–í–´–ô –§–ê–ô–õ
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from app.core.config import settings
from app.core.logger import logger
from app.tasks.yield_distributor import distribute_full_yield
from datetime import date, datetime
import pytz

router = Router()

msk = pytz.timezone("Europe/Moscow")


@router.message(Command("yield_users"))
async def cmd_yield_users(msg: Message):
    """–†—É—á–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if msg.from_user.id not in settings.ADMIN_TG_IDS:
        return

    await msg.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏...")

    try:
        await distribute_full_yield(msg.bot)
        await msg.answer("‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: {e}")
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏: {e}")


@router.message(Command("yield_info"))
async def cmd_yield_info(msg: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"""
    if msg.from_user.id not in settings.ADMIN_TG_IDS:
        return

    now_msk = datetime.now(msk)
    today = date.today()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
    from app.core.db import SessionLocal
    from app.models.income_log import IncomeLog
    from sqlalchemy import func

    db = SessionLocal()
    try:
        # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
        last_income = db.query(IncomeLog).order_by(IncomeLog.date.desc()).first()

        # –ù–∞—á–∏—Å–ª–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_total = db.query(func.sum(IncomeLog.amount_usd)).filter(
            IncomeLog.date == today
        ).scalar() or 0.0

        today_users = db.query(func.count(func.distinct(IncomeLog.user_id))).filter(
            IncomeLog.date == today
        ).scalar() or 0

        info = (
            f"üí∞ <b>–°–∏—Å—Ç–µ–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</b>\n\n"
            f"üïê <b>–í—Ä–µ–º—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è:</b> {settings.YIELD_TIME_UTC_HOUR + 3}:00 –ú–°–ö\n"
            f"üìÖ <b>–°–µ–π—á–∞—Å:</b> {now_msk.strftime('%H:%M')} –ú–°–ö\n\n"
            f"<b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ:</b>\n"
            f"üìÖ –î–∞—Ç–∞: {last_income.date if last_income else '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n"
            f"<b>–ó–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):</b>\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {today_users}\n"
            f"üíµ –°—É–º–º–∞: ${today_total:.2f}\n\n"
            f"<b>–ü—É–ª—ã –∏ –¥–∏–∞–ø–∞–∑–æ–Ω—ã:</b>\n"
        )

        for pool_name, yield_range in settings.POOL_YIELD_RANGES.items():
            coeff = settings.POOL_COEFFICIENTS.get(pool_name, 1.0)
            final_min = yield_range[0] * coeff
            final_max = yield_range[1] * coeff
            info += f"‚Ä¢ {pool_name}: {final_min:.1f}-{final_max:.1f}%\n"

        await msg.answer(info, parse_mode="HTML")

    finally:
        db.close()