# app/bot/handlers/admin/management.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
import json
import os
from typing import Dict, Any

from app.core.config import settings
from app.bot.states.admin import AdminStates

router = Router()


def get_management_menu_kb():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üí≥ –ê–¥—Ä–µ—Å–∞ –∫–æ—à–µ–ª—å–∫–æ–≤", callback_data="manage_addresses"),
                InlineKeyboardButton(text="üè¶ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–æ–≤", callback_data="manage_pools")
            ],
            [
                InlineKeyboardButton(text="üí∏ –ö–æ–º–∏—Å—Å–∏–∏ –≤—ã–≤–æ–¥–∞", callback_data="manage_fees"),
                InlineKeyboardButton(text="üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="manage_referral")
            ],
            [
                InlineKeyboardButton(text="üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏", callback_data="manage_coefficients"),
                InlineKeyboardButton(text="‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="manage_system")
            ],
            [
                InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_menu")
            ]
        ]
    )


def get_back_to_management_kb():
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="admin_management")]
        ]
    )


@router.callback_query(F.data == "admin_management")
async def show_management_menu(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    text = (
        "‚öôÔ∏è <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    )

    await call.message.edit_text(text, reply_markup=get_management_menu_kb())
    await state.set_state(AdminStates.management_menu)


@router.callback_query(StateFilter(AdminStates.management_menu), F.data == "manage_addresses")
async def show_payment_addresses(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    addresses = settings.PAYMENT_ADDRESSES

    text = "üí≥ <b>–ê–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>\n\n"

    for currency, address in addresses.items():
        currency_name = {
            "usdt_ton": "USDT (TON)",
            "usdt_bep20": "USDT (BEP20)",
            "card_ru": "–ö–∞—Ä—Ç–∞ –†–§",
            "trx": "TRX"
        }.get(currency, currency.upper())

        text += f"<b>{currency_name}:</b>\n<code>{address}</code>\n\n"

    text += "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n<code>/set_address [–≤–∞–ª—é—Ç–∞] [–Ω–æ–≤—ã–π_–∞–¥—Ä–µ—Å]</code>\n\n"
    text += "–ü—Ä–∏–º–µ—Ä: <code>/set_address usdt_ton UQBnew...</code>"

    await call.message.edit_text(text, reply_markup=get_back_to_management_kb(), parse_mode="HTML")
    await state.set_state(AdminStates.editing_addresses)


@router.callback_query(StateFilter(AdminStates.management_menu), F.data == "manage_pools")
async def show_pool_settings(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–æ–≤"""
    pools = settings.POOL_LIMITS
    yields = settings.POOL_YIELD_RANGES
    coefficients = settings.POOL_COEFFICIENTS

    text = "üè¶ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–æ–≤</b>\n\n"

    for pool_name, limits in pools.items():
        yield_range = yields.get(pool_name, (0, 0))
        coeff = coefficients.get(pool_name, 1.0)

        text += (
            f"<b>{pool_name}:</b>\n"
            f"‚Ä¢ –õ–∏–º–∏—Ç—ã: ${limits['min']} - ${limits['max']} (–º–∞–∫—Å. –Ω–∞ —é–∑–µ—Ä–∞: ${limits['max_per_user']})\n"
            f"‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {yield_range[0]:.1f}% - {yield_range[1]:.1f}%\n"
            f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {coeff:.2f}\n\n"
        )

    text += (
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
        "<code>/set_pool_limits [–ø—É–ª] [–º–∏–Ω] [–º–∞–∫—Å] [–º–∞–∫—Å_–Ω–∞_—é–∑–µ—Ä–∞]</code>\n"
        "<code>/set_pool_yield [–ø—É–ª] [–º–∏–Ω%] [–º–∞–∫—Å%]</code>\n"
        "<code>/set_pool_coeff [–ø—É–ª] [–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/set_pool_limits Basic 25 150 1200</code>"
    )

    await call.message.edit_text(text, reply_markup=get_back_to_management_kb(), parse_mode="HTML")
    await state.set_state(AdminStates.editing_pools)


@router.callback_query(StateFilter(AdminStates.management_menu), F.data == "manage_fees")
async def show_withdraw_fees(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –≤—ã–≤–æ–¥"""
    tiers = settings.WITHDRAW_TIERS
    express_fee = settings.WITHDRAW_EXPRESS_FEE
    base_days = settings.WITHDRAW_BASE_DAYS

    text = "üí∏ <b>–ö–æ–º–∏—Å—Å–∏–∏ –∑–∞ –≤—ã–≤–æ–¥</b>\n\n"

    text += "<b>–ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ –¥–µ–ø–æ–∑–∏—Ç–∞):</b>\n"
    for days, fee in sorted(tiers.items()):
        if days == 0:
            text += f"‚Ä¢ –°—Ä–∞–∑—É: {fee * 100:.1f}%\n"
        else:
            text += f"‚Ä¢ –ß–µ—Ä–µ–∑ {days} –¥–Ω.: {fee * 100:.1f}%\n"

    text += f"\n<b>–≠–∫—Å–ø—Ä–µ—Å—Å-—Ä–µ–∂–∏–º:</b> {express_fee * 100:.1f}%\n"
    text += f"<b>–°—Ä–æ–∫ –±–∞–∑–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞:</b> –¥–æ {base_days} –¥–Ω–µ–π\n\n"

    text += (
        "–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
        "<code>/set_withdraw_tier [–¥–Ω–∏] [–∫–æ–º–∏—Å—Å–∏—è]</code>\n"
        "<code>/set_express_fee [–∫–æ–º–∏—Å—Å–∏—è]</code>\n"
        "<code>/set_base_days [–¥–Ω–∏]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/set_withdraw_tier 7 0.03</code> (3%)"
    )

    await call.message.edit_text(text, reply_markup=get_back_to_management_kb(), parse_mode="HTML")
    await state.set_state(AdminStates.editing_fees)


@router.callback_query(StateFilter(AdminStates.management_menu), F.data == "manage_referral")
async def show_referral_settings(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    levels = settings.REFERRAL_LEVELS

    text = "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n\n"

    for i, percent in enumerate(levels, 1):
        text += f"‚Ä¢ {i} —É—Ä–æ–≤–µ–Ω—å: {percent:.1f}%\n"

    text += (
        f"\n–í—Å–µ–≥–æ —É—Ä–æ–≤–Ω–µ–π: {len(levels)}\n\n"
        "–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n"
        "<code>/set_referral [—É—Ä–æ–≤–µ–Ω—å] [–ø—Ä–æ—Ü–µ–Ω—Ç]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/set_referral 1 12.0</code>"
    )

    await call.message.edit_text(text, reply_markup=get_back_to_management_kb(), parse_mode="HTML")
    await state.set_state(AdminStates.editing_referral)


@router.callback_query(StateFilter(AdminStates.management_menu), F.data == "manage_coefficients")
async def show_coefficients(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
    coefficients = settings.POOL_COEFFICIENTS

    text = "üìä <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏</b>\n\n"
    text += "–ú–Ω–æ–∂–∏—Ç–µ–ª–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ –ø—É–ª–∞–º:\n\n"

    for pool_name, coeff in coefficients.items():
        status = "üü¢ –ù–æ—Ä–º–∞" if coeff == 1.0 else ("üî¥ –°–Ω–∏–∂–µ–Ω" if coeff < 1.0 else "üü° –ü–æ–≤—ã—à–µ–Ω")
        text += f"<b>{pool_name}:</b> {coeff:.2f} ({status})\n"

    text += (
        "\n<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        "‚Ä¢ 1.0 = –æ–±—ã—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å\n"
        "‚Ä¢ 0.8 = –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–µ–Ω–∞ –Ω–∞ 20%\n"
        "‚Ä¢ 1.2 = –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø–æ–≤—ã—à–µ–Ω–∞ –Ω–∞ 20%\n\n"
        "–ö–æ–º–∞–Ω–¥–∞: <code>/set_coeff [–ø—É–ª] [–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç]</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/set_coeff Alpha 1.1</code>"
    )

    await call.message.edit_text(text, reply_markup=get_back_to_management_kb(), parse_mode="HTML")
    await state.set_state(AdminStates.editing_coefficients)


@router.callback_query(StateFilter(AdminStates.management_menu), F.data == "manage_system")
async def show_system_settings(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    text = (
        "‚öôÔ∏è <b>–°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"ü§ñ <b>–ê–¥–º–∏–Ω—ã:</b> {len(settings.ADMIN_TG_IDS)} —á–µ–ª.\n"
        f"üåç <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏:</b> ru, en, uk\n"
        f"üìä <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> SQLite\n"
        f"üîÑ <b>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:</b> –ê–∫—Ç–∏–≤–Ω–∞\n\n"

        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "<code>/add_admin [tg_id]</code> - –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
        "<code>/remove_admin [tg_id]</code> - —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
        "<code>/system_status</code> - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
        "<code>/backup_db</code> - —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ë–î\n"
        "<code>/clear_logs</code> - –æ—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏"
    )

    await call.message.edit_text(text, reply_markup=get_back_to_management_kb(), parse_mode="HTML")
    await state.set_state(AdminStates.system_management)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫

@router.message(StateFilter(AdminStates.editing_addresses), F.text.startswith("/set_address"))
async def set_payment_address(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    try:
        parts = msg.text.split(None, 2)
        if len(parts) != 3:
            await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /set_address [–≤–∞–ª—é—Ç–∞] [–∞–¥—Ä–µ—Å]")
            return

        currency = parts[1].lower()
        new_address = parts[2]

        if currency not in settings.PAYMENT_ADDRESSES:
            await msg.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞: {currency}")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        settings.PAYMENT_ADDRESSES[currency] = new_address

        await msg.answer(f"‚úÖ –ê–¥—Ä–µ—Å –¥–ª—è {currency.upper()} –æ–±–Ω–æ–≤–ª–µ–Ω")
        await show_payment_addresses(msg, state)

    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(StateFilter(AdminStates.editing_pools), F.text.startswith("/set_pool_limits"))
async def set_pool_limits(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ª–∏–º–∏—Ç—ã –ø—É–ª–∞"""
    try:
        parts = msg.text.split()
        if len(parts) != 5:
            await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: /set_pool_limits [–ø—É–ª] [–º–∏–Ω] [–º–∞–∫—Å] [–º–∞–∫—Å_–Ω–∞_—é–∑–µ—Ä–∞]")
            return

        pool_name = parts[1]
        min_val = int(parts[2])
        max_val = int(parts[3])
        max_per_user = int(parts[4])

        if pool_name not in settings.POOL_LIMITS:
            await msg.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–ª: {pool_name}")
            return

        settings.POOL_LIMITS[pool_name] = {
            "min": min_val,
            "max": max_val,
            "max_per_user": max_per_user
        }

        await msg.answer(f"‚úÖ –õ–∏–º–∏—Ç—ã –ø—É–ª–∞ {pool_name} –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
        await show_pool_settings(msg, state)

    except ValueError:
        await msg.answer("‚ùå –í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(StateFilter(AdminStates.editing_pools), F.text.startswith("/set_pool_yield"))
async def set_pool_yield(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø—É–ª–∞"""
    try:
        parts = msg.text.split()
        if len(parts) != 4:
            await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: /set_pool_yield [–ø—É–ª] [–º–∏–Ω%] [–º–∞–∫—Å%]")
            return

        pool_name = parts[1]
        min_yield = float(parts[2])
        max_yield = float(parts[3])

        if pool_name not in settings.POOL_YIELD_RANGES:
            await msg.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–ª: {pool_name}")
            return

        settings.POOL_YIELD_RANGES[pool_name] = (min_yield, max_yield)

        await msg.answer(f"‚úÖ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –ø—É–ª–∞ {pool_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {min_yield}% - {max_yield}%")
        await show_pool_settings(msg, state)

    except ValueError:
        await msg.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(StateFilter(AdminStates.editing_pools), F.text.startswith("/set_pool_coeff"))
async def set_pool_coefficient(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—É–ª–∞"""
    try:
        parts = msg.text.split()
        if len(parts) != 3:
            await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: /set_pool_coeff [–ø—É–ª] [–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç]")
            return

        pool_name = parts[1]
        coefficient = float(parts[2])

        if pool_name not in settings.POOL_COEFFICIENTS:
            await msg.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–ª: {pool_name}")
            return

        settings.POOL_COEFFICIENTS[pool_name] = coefficient

        await msg.answer(f"‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –ø—É–ª–∞ {pool_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {coefficient}")
        await show_pool_settings(msg, state)

    except ValueError:
        await msg.answer("‚ùå –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(StateFilter(AdminStates.editing_fees), F.text.startswith("/set_withdraw_tier"))
async def set_withdraw_tier(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é –∑–∞ –≤—ã–≤–æ–¥ –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        parts = msg.text.split()
        if len(parts) != 3:
            await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: /set_withdraw_tier [–¥–Ω–∏] [–∫–æ–º–∏—Å—Å–∏—è]")
            return

        days = int(parts[1])
        fee = float(parts[2])

        settings.WITHDRAW_TIERS[days] = fee

        await msg.answer(f"‚úÖ –ö–æ–º–∏—Å—Å–∏—è —á–µ—Ä–µ–∑ {days} –¥–Ω–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {fee * 100:.1f}%")
        await show_withdraw_fees(msg, state)

    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(StateFilter(AdminStates.editing_fees), F.text.startswith("/set_express_fee"))
async def set_express_fee(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–º–∏—Å—Å–∏—é —ç–∫—Å–ø—Ä–µ—Å—Å-—Ä–µ–∂–∏–º–∞"""
    try:
        parts = msg.text.split()
        if len(parts) != 2:
            await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: /set_express_fee [–∫–æ–º–∏—Å—Å–∏—è]")
            return

        fee = float(parts[1])
        settings.WITHDRAW_EXPRESS_FEE = fee

        await msg.answer(f"‚úÖ –ö–æ–º–∏—Å—Å–∏—è —ç–∫—Å–ø—Ä–µ—Å—Å-—Ä–µ–∂–∏–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {fee * 100:.1f}%")
        await show_withdraw_fees(msg, state)

    except ValueError:
        await msg.answer("‚ùå –ö–æ–º–∏—Å—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(StateFilter(AdminStates.editing_referral), F.text.startswith("/set_referral"))
async def set_referral_level(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
    try:
        parts = msg.text.split()
        if len(parts) != 3:
            await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: /set_referral [—É—Ä–æ–≤–µ–Ω—å] [–ø—Ä–æ—Ü–µ–Ω—Ç]")
            return

        level = int(parts[1]) - 1  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å–∏–≤–∞
        percent = float(parts[2])

        if level < 0 or level >= len(settings.REFERRAL_LEVELS):
            await msg.answer(f"‚ùå –£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ {len(settings.REFERRAL_LEVELS)}")
            return

        settings.REFERRAL_LEVELS[level] = percent

        await msg.answer(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç {level + 1} —É—Ä–æ–≤–Ω—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {percent}%")
        await show_referral_settings(msg, state)

    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–µ–ª")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(StateFilter(AdminStates.editing_coefficients), F.text.startswith("/set_coeff"))
async def set_coefficient(msg: Message, state: FSMContext):
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
    try:
        parts = msg.text.split()
        if len(parts) != 3:
            await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: /set_coeff [–ø—É–ª] [–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç]")
            return

        pool_name = parts[1]
        coefficient = float(parts[2])

        if pool_name not in settings.POOL_COEFFICIENTS:
            await msg.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–ª: {pool_name}")
            return

        settings.POOL_COEFFICIENTS[pool_name] = coefficient

        await msg.answer(f"‚úÖ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {pool_name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {coefficient}")
        await show_coefficients(msg, state)

    except ValueError:
        await msg.answer("‚ùå –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")