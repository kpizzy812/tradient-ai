# –î–æ–±–∞–≤–∏—Ç—å –≤ app/bot/handlers/admin/yield_management.py

from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from app.core.config import settings
from app.core.logger import logger
from datetime import datetime

router = Router()


@router.message(Command("yield_status"))
async def cmd_yield_status(msg: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
    if msg.from_user.id not in settings.ADMIN_TG_IDS:
        return

    from app.bot.handlers.yield_report import admin_check_yield_system
    await admin_check_yield_system(msg.bot, msg.from_user.id)


@router.message(Command("yield_post"))
async def cmd_yield_post(msg: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
    if msg.from_user.id not in settings.ADMIN_TG_IDS:
        return

    from app.bot.handlers.yield_report import admin_force_yield_post
    await admin_force_yield_post(msg.bot, msg.from_user.id)


@router.message(Command("yield_manual"))
async def cmd_yield_manual(msg: Message):
    """–†—É—á–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    –§–æ—Ä–º–∞—Ç: /yield_manual 2025-06-10 3.5
    """
    if msg.from_user.id not in settings.ADMIN_TG_IDS:
        return

    try:
        parts = msg.text.split()
        if len(parts) != 3:
            await msg.answer("‚ùå –§–æ—Ä–º–∞—Ç: /yield_manual YYYY-MM-DD –ø—Ä–æ—Ü–µ–Ω—Ç\n–ü—Ä–∏–º–µ—Ä: /yield_manual 2025-06-10 3.5")
            return

        date_str = parts[1]
        percent = float(parts[2])

        if not (0 <= percent <= 15):
            await msg.answer("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 15")
            return

        from app.bot.handlers.yield_report import admin_force_yield_post
        await admin_force_yield_post(msg.bot, msg.from_user.id, date_str, percent)

    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: /yield_manual 2025-06-10 3.5")
    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("trade_generate"))
async def cmd_trade_generate(msg: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–∞"""
    if msg.from_user.id not in settings.ADMIN_TG_IDS:
        return

    try:
        from app.services.trade_generator import generate_fake_trade
        from app.bot.handlers.trades import post_last_trade

        await msg.answer("üîÑ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç—Ä–µ–π–¥...")

        trade_id = generate_fake_trade()

        if trade_id:
            await post_last_trade(msg.bot)
            await msg.answer(f"‚úÖ –¢—Ä–µ–π–¥ #{trade_id} —Å–æ–∑–¥–∞–Ω –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        else:
            await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–π–¥")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–∞: {e}")
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("yield_routine"))
async def cmd_yield_routine(msg: Message):
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π —Ä—É—Ç–∏–Ω—ã –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è + –ø–æ—Å—Ç)"""
    if msg.from_user.id not in settings.ADMIN_TG_IDS:
        return

    try:
        from app.bot.handlers.yield_report import daily_yield_routine

        await msg.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ä—É—Ç–∏–Ω—É –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏...")

        success = await daily_yield_routine(msg.bot)

        if success:
            await msg.answer("‚úÖ –†—É—Ç–∏–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞ –≤ —Ä—É—Ç–∏–Ω–µ")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä—É—Ç–∏–Ω—ã: {e}")
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


@router.message(Command("day_stats"))
async def cmd_day_stats(msg: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É –¥–Ω—é"""
    if msg.from_user.id not in settings.ADMIN_TG_IDS:
        return

    try:
        from app.services.trade_generator import calculate_daily_stats
        from app.core.db import SessionLocal

        db = SessionLocal()
        stats = calculate_daily_stats(db)
        db.close()

        hours_left = stats['time_left_seconds'] / 3600

        report = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è:</b>\n\n"
            f"üí∞ <b>–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å:</b> {stats['total_pct']:.2f}%\n"
            f"üìà <b>–°–¥–µ–ª–æ–∫:</b> {stats['total_trades']}\n"
            f"‚úÖ <b>–í–∏–Ω—Ä–µ–π—Ç:</b> {stats['winrate']:.1%}\n"
            f"‚è∞ <b>–î–æ –∫–æ–Ω—Ü–∞:</b> {hours_left:.1f}—á\n"
            f"üéØ <b>–¶–µ–ª—å:</b> 2.0-5.0%"
        )

        await msg.answer(report, parse_mode="HTML")

    except Exception as e:
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
async def auto_diagnostic_check(bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã (–º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é)"""
    try:
        from app.services.yielding import validate_system_health, get_recent_yields
        from app.services.trade_generator import calculate_daily_stats
        from app.core.db import SessionLocal

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
        is_healthy = validate_system_health()

        if not is_healthy:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
            recent = get_recent_yields(3)
            problems = []

            for date, pct in recent:
                if pct < 1.5:
                    problems.append(f"{date}: {pct}% (–Ω–∏–∑–∫–æ)")
                elif pct > 7.0:
                    problems.append(f"{date}: {pct}% (–≤—ã—Å–æ–∫–æ)")

            alert = f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏:</b>\n\n"
            alert += "\n".join(problems)
            alert += f"\n\nüí° –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç—Ä–µ–π–¥–æ–≤"

            for admin_id in settings.ADMIN_TG_IDS:
                try:
                    await bot.send_message(admin_id, alert, parse_mode="HTML")
                except:
                    pass

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
        db = SessionLocal()
        stats = calculate_daily_stats(db)
        db.close()

        current_pct = stats['total_pct']
        hours_left = stats['time_left_seconds'] / 3600

        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –µ—Å–ª–∏ –¥–µ–Ω—å –∏–¥–µ—Ç –ø–ª–æ—Ö–æ
        if hours_left < 4 and (current_pct < 1.0 or current_pct > 6.0):
            warning = (
                f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–µ–∫—É—â–∏–º –¥–Ω–µ–º</b>\n\n"
                f"üí∞ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {current_pct:.2f}%\n"
                f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {hours_left:.1f}—á\n"
                f"üéØ –¶–µ–ª—å: 2.0-5.0%"
            )

            for admin_id in settings.ADMIN_TG_IDS:
                try:
                    await bot.send_message(admin_id, warning, parse_mode="HTML")
                except:
                    pass

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: {e}")