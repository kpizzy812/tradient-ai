# app/bot/handlers/admin/requests.py
from aiogram import Router, F, Bot
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from sqlalchemy.orm import Session
from sqlalchemy import desc

from app.core.db import SessionLocal
from app.models.users import User
from app.models.deposit_request import DepositRequest
from app.models.withdraw_request import WithdrawRequest
from app.bot.states.admin import AdminStates
from app.services.logic import invest_user, t

router = Router()


def get_request_card_kb(request_id: int, request_type: str, status: str):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞—è–≤–∫–∏"""
    buttons = []

    if status == "pending":
        if request_type == "deposit":
            buttons.extend([
                [
                    InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_{request_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{request_id}")
                ],
                [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{request_id}")]
            ])
        elif request_type == "withdraw":
            buttons.extend([
                [
                    InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"withdraw_approve_{request_id}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"withdraw_decline_{request_id}")
                ]
            ])

    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([
        InlineKeyboardButton(text="üîô –ö —Å–ø–∏—Å–∫—É", callback_data=f"admin_{request_type}s")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(F.data.startswith("view_deposit_"))
async def view_deposit_request(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"""
    request_id = int(call.data.split("_")[-1])
    db = SessionLocal()

    try:
        req = db.query(DepositRequest).filter(DepositRequest.id == request_id).first()
        if not req:
            await call.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        user = db.query(User).filter(User.id == req.user_id).first()
        if not user:
            await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è
        ref_line = "üîó <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å:</b> ‚Äî"
        if user.referrer_id:
            ref = db.query(User).filter(User.id == user.referrer_id).first()
            if ref:
                ref_line = f"üîó <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å:</b> "
                ref_line += f"@{ref.username} ({ref.tg_id})" if ref.username else f"ID {ref.tg_id}"

        # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = {
            "pending": "‚è≥",
            "approved": "‚úÖ",
            "declined": "‚ùå",
            "deleted": "üóë"
        }.get(req.status, "‚ùì")

        status_text = {
            "pending": "–û–∂–∏–¥–∞–µ—Ç",
            "approved": "–û–¥–æ–±—Ä–µ–Ω–æ",
            "declined": "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
            "deleted": "–£–¥–∞–ª–µ–Ω–æ"
        }.get(req.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        user_line = f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> "
        user_line += f"@{user.username} ({user.tg_id})" if user.username else f"ID {user.tg_id}"

        text = (
            f"üí∞ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ #{req.id}</b>\n\n"
            f"{user_line}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> ${user.profit_usd:.2f}\n"
            f"üí≥ <b>–í—Å–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–æ–≤:</b> ${user.deposit_usd:.2f}\n"
            f"{ref_line}\n\n"
            f"üíµ <b>–°—É–º–º–∞:</b> <code>${req.amount_usd:.2f}</code>\n"
            f"üè¶ <b>–ü—É–ª:</b> <code>{req.pool_name}</code>\n"
            f"üí≥ <b>–ú–µ—Ç–æ–¥:</b> <code>{req.method}</code>\n"
        )

        if req.currency:
            text += f"üí± <b>–í–∞–ª—é—Ç–∞:</b> <code>{req.currency}</code>\n"

        if req.details:
            text += f"üìã <b>–î–µ—Ç–∞–ª–∏:</b> <code>{req.details}</code>\n"

        text += (
            f"\nüìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}\n"
            f"üïí <b>–°–æ–∑–¥–∞–Ω–∞:</b> {req.created_at.strftime('%d.%m.%Y %H:%M')}"
        )

        kb = get_request_card_kb(req.id, "deposit", req.status)

        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await state.set_state(AdminStates.request_detail)

    finally:
        db.close()


@router.callback_query(F.data.startswith("view_withdraw_"))
async def view_withdraw_request(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥"""
    request_id = int(call.data.split("_")[-1])
    db = SessionLocal()

    try:
        req = db.query(WithdrawRequest).filter(WithdrawRequest.id == request_id).first()
        if not req:
            await call.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        user = db.query(User).filter(User.id == req.user_id).first()
        if not user:
            await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—è
        ref_line = "üîó <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å:</b> ‚Äî"
        if user.referrer_id:
            ref = db.query(User).filter(User.id == user.referrer_id).first()
            if ref:
                ref_line = f"üîó <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å:</b> "
                ref_line += f"@{ref.username} ({ref.tg_id})" if ref.username else f"ID {ref.tg_id}"

        # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
        status_emoji = {
            "pending": "‚è≥",
            "executed": "‚úÖ",
            "auto_paid": "ü§ñ",
            "declined": "‚ùå"
        }.get(req.status, "‚ùì")

        status_text = {
            "pending": "–û–∂–∏–¥–∞–µ—Ç",
            "executed": "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            "auto_paid": "–ê–≤—Ç–æ-–≤—ã–ø–ª–∞—Ç–∞",
            "declined": "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        }.get(req.status, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

        user_line = f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> "
        user_line += f"@{user.username} ({user.tg_id})" if user.username else f"ID {user.tg_id}"

        # –ò—Å—Ç–æ—á–Ω–∏–∫ –∏ —Ä–µ–∂–∏–º
        source_text = "üí∞ –ë–∞–ª–∞–Ω—Å" if req.source == "balance" else f"üè¶ –ü—É–ª {req.pool_name}"
        mode_text = ""
        if req.mode:
            mode_text = f" (<b>{req.mode}</b>)"

        # –ö–æ–º–∏—Å—Å–∏—è
        commission_amount = req.amount_usd - req.final_amount_usd
        commission_percent = (commission_amount / req.amount_usd * 100) if req.amount_usd > 0 else 0

        text = (
            f"üí∏ <b>–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #{req.id}</b>\n\n"
            f"{user_line}\n"
            f"üí∞ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> ${user.profit_usd:.2f}\n"
            f"{ref_line}\n\n"
            f"üì§ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {source_text}{mode_text}\n"
            f"üí∞ <b>–ó–∞–ø—Ä–æ—à–µ–Ω–æ:</b> <code>${req.amount_usd:.2f}</code>\n"
            f"üíµ <b>–ö –≤—ã–ø–ª–∞—Ç–µ:</b> <code>${req.final_amount_usd:.2f}</code>\n"
            f"üìä <b>–ö–æ–º–∏—Å—Å–∏—è:</b> <code>${commission_amount:.2f}</code> ({commission_percent:.1f}%)\n"
            f"üí≥ <b>–ú–µ—Ç–æ–¥:</b> <code>{req.method}</code>\n"
        )

        if req.currency:
            text += f"üí± <b>–í–∞–ª—é—Ç–∞:</b> <code>{req.currency}</code>\n"

        if req.details:
            text += f"üì• <b>–†–µ–∫–≤–∏–∑–∏—Ç—ã:</b>\n<code>{req.details}</code>\n"

        text += f"\nüìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_emoji} {status_text}\n"

        if req.execute_until:
            text += f"‚è∞ <b>–í—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ:</b> {req.execute_until.strftime('%d.%m.%Y %H:%M')}\n"

        text += f"üïí <b>–°–æ–∑–¥–∞–Ω–∞:</b> {req.created_at.strftime('%d.%m.%Y %H:%M')}"

        kb = get_request_card_kb(req.id, "withdraw", req.status)

        await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
        await state.set_state(AdminStates.request_detail)

    finally:
        db.close()