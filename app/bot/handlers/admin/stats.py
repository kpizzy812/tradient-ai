# app/bot/handlers/admin/stats.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from sqlalchemy.orm import Session
from sqlalchemy import func, and_
from datetime import datetime, timedelta

from app.core.db import SessionLocal
from app.models.users import User
from app.models.investments import Investment
from app.models.deposit_request import DepositRequest
from app.models.withdraw_request import WithdrawRequest
from app.models.income_log import IncomeLog
from app.bot.states.admin import AdminStates
from app.bot.keyboards.admin import get_back_to_stats_kb, get_back_to_menu_kb
from app.services.logic import t

router = Router()


@router.callback_query(StateFilter(AdminStates.stats_menu), F.data == "stats_general")
async def show_general_stats(call: CallbackQuery, state: FSMContext):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    db = SessionLocal()

    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_users = db.query(User).count()
        active_users = db.query(User).filter(User.deposit_usd > 0).count()

        total_deposits = db.query(func.sum(User.deposit_usd)).scalar() or 0
        total_profits = db.query(func.sum(User.profit_usd)).scalar() or 0
        total_ref_balance = db.query(func.sum(User.ref_balance)).scalar() or 0

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        active_investments = db.query(func.sum(Investment.amount_usd)).filter(
            Investment.is_active == True
        ).scalar() or 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        month_ago = datetime.utcnow() - timedelta(days=30)
        new_users_month = db.query(User).filter(User.created_at >= month_ago).count()

        # –°—Ä–µ–¥–Ω–µ–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        avg_deposit = total_deposits / max(active_users, 1)
        avg_profit = total_profits / max(active_users, 1)

        text = (
            "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users:,}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users:,} ({active_users / max(total_users, 1) * 100:.1f}%)\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {new_users_month:,}\n\n"

            f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
            f"‚Ä¢ –û–±—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${total_deposits:,.2f}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${active_investments:,.2f}\n"
            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total_profits:,.2f}\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ: ${total_ref_balance:,.2f}\n\n"

            f"üìà <b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –î–µ–ø–æ–∑–∏—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ: ${avg_deposit:.2f}\n"
            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ: ${avg_profit:.2f}\n"
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_general")],
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)
    await state.set_state(AdminStates.stats_general)


@router.callback_query(StateFilter(AdminStates.stats_menu), F.data == "stats_deposits")
async def show_deposits_stats(call: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"""
    db = SessionLocal()

    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
        total_requests = db.query(DepositRequest).count()
        pending_requests = db.query(DepositRequest).filter(
            DepositRequest.status == "pending"
        ).count()
        approved_requests = db.query(DepositRequest).filter(
            DepositRequest.status == "approved"
        ).count()
        declined_requests = db.query(DepositRequest).filter(
            DepositRequest.status == "declined"
        ).count()

        # –°—É–º–º—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_amount = db.query(func.sum(DepositRequest.amount_usd)).filter(
            DepositRequest.status == "pending"
        ).scalar() or 0

        approved_amount = db.query(func.sum(DepositRequest.amount_usd)).filter(
            DepositRequest.status == "approved"
        ).scalar() or 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É–ª–∞–º
        pool_stats = db.query(
            DepositRequest.pool_name,
            func.count(DepositRequest.id).label('count'),
            func.sum(DepositRequest.amount_usd).label('total')
        ).filter(
            DepositRequest.status == "approved"
        ).group_by(DepositRequest.pool_name).all()

        # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.utcnow() - timedelta(days=7)
        week_deposits = db.query(func.sum(DepositRequest.amount_usd)).filter(
            and_(
                DepositRequest.status == "approved",
                DepositRequest.created_at >= week_ago
            )
        ).scalar() or 0

        # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        today_deposits = db.query(func.sum(DepositRequest.amount_usd)).filter(
            and_(
                DepositRequest.status == "approved",
                DepositRequest.created_at >= today
            )
        ).scalar() or 0

        pool_lines = "\n".join([
            f"‚Ä¢ {pool}: {count} –∑–∞—è–≤–æ–∫, ${total:,.2f}"
            for pool, count, total in pool_stats
        ])

        text = (
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</b>\n\n"
            f"üìã <b>–ó–∞—è–≤–∫–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_requests:,}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {pending_requests:,} (${pending_amount:,.2f})\n"
            f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_requests:,} (${approved_amount:,.2f})\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {declined_requests:,}\n\n"

            f"üìä <b>–ü–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>\n"
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: ${today_deposits:,.2f}\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: ${week_deposits:,.2f}\n\n"

            f"üè¶ <b>–ü–æ –ø—É–ª–∞–º:</b>\n{pool_lines or '‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="pending_deposits"),
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_deposits")
                ],
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)
    await state.set_state(AdminStates.stats_deposits)


@router.callback_query(StateFilter(AdminStates.stats_menu), F.data == "stats_withdrawals")
async def show_withdrawals_stats(call: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤"""
    db = SessionLocal()

    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
        total_requests = db.query(WithdrawRequest).count()
        pending_requests = db.query(WithdrawRequest).filter(
            WithdrawRequest.status == "pending"
        ).count()
        approved_requests = db.query(WithdrawRequest).filter(
            WithdrawRequest.status == "approved"
        ).count()

        # –°—É–º–º—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_amount = db.query(func.sum(WithdrawRequest.amount_usd)).filter(
            WithdrawRequest.status == "pending"
        ).scalar() or 0

        approved_amount = db.query(func.sum(WithdrawRequest.final_amount_usd)).filter(
            WithdrawRequest.status == "approved"
        ).scalar() or 0

        # –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        balance_withdrawals = db.query(func.sum(WithdrawRequest.amount_usd)).filter(
            and_(
                WithdrawRequest.source == "balance",
                WithdrawRequest.status == "approved"
            )
        ).scalar() or 0

        investment_withdrawals = db.query(func.sum(WithdrawRequest.amount_usd)).filter(
            and_(
                WithdrawRequest.source == "investment",
                WithdrawRequest.status == "approved"
            )
        ).scalar() or 0

        # –ü–æ –º–µ—Ç–æ–¥–∞–º –≤—ã–≤–æ–¥–∞
        method_stats = db.query(
            WithdrawRequest.method,
            func.count(WithdrawRequest.id).label('count'),
            func.sum(WithdrawRequest.final_amount_usd).label('total')
        ).filter(
            WithdrawRequest.status == "approved"
        ).group_by(WithdrawRequest.method).all()

        method_lines = "\n".join([
            f"‚Ä¢ {method}: {count} —à—Ç, ${total:,.2f}"
            for method, count, total in method_stats
        ])

        text = (
            "üìâ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤</b>\n\n"
            f"üìã <b>–ó–∞—è–≤–∫–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_requests:,}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {pending_requests:,} (${pending_amount:,.2f})\n"
            f"‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ: {approved_requests:,} (${approved_amount:,.2f})\n\n"

            f"üìä <b>–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:</b>\n"
            f"‚Ä¢ –° –±–∞–ª–∞–Ω—Å–∞: ${balance_withdrawals:,.2f}\n"
            f"‚Ä¢ –ò–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${investment_withdrawals:,.2f}\n\n"

            f"üí≥ <b>–ü–æ –º–µ—Ç–æ–¥–∞–º:</b>\n{method_lines or '‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="pending_withdrawals"),
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_withdrawals")
                ],
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)
    await state.set_state(AdminStates.stats_withdrawals)


@router.callback_query(F.data == "pending_deposits")
async def show_pending_deposits(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    db = SessionLocal()

    try:
        pending_requests = db.query(DepositRequest).filter(
            DepositRequest.status == "pending"
        ).order_by(DepositRequest.created_at.desc()).limit(10).all()

        if not pending_requests:
            text = "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
        else:
            lines = []
            for req in pending_requests:
                user = db.query(User).filter(User.id == req.user_id).first()
                username = f"@{user.username}" if user.username else f"ID{user.tg_id}"

                lines.append(
                    f"‚Ä¢ {username} | {req.pool_name} | ${req.amount_usd:.2f}\n"
                    f"  {req.created_at.strftime('%d.%m %H:%M')}"
                )

            text = "‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):</b>\n\n" + "\n\n".join(lines)

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pending_deposits")],
                [InlineKeyboardButton(text="üîô –ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º", callback_data="stats_deposits")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)


@router.callback_query(F.data == "pending_withdrawals")
async def show_pending_withdrawals(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–≤–æ–¥—ã"""
    db = SessionLocal()

    try:
        pending_requests = db.query(WithdrawRequest).filter(
            WithdrawRequest.status == "pending"
        ).order_by(WithdrawRequest.created_at.desc()).limit(10).all()

        if not pending_requests:
            text = "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥"
        else:
            lines = []
            for req in pending_requests:
                user = db.query(User).filter(User.id == req.user_id).first()
                username = f"@{user.username}" if user.username else f"ID{user.tg_id}"

                source_text = "–ë–∞–ª–∞–Ω—Å" if req.source == "balance" else f"–ü—É–ª {req.pool_name}"
                mode_text = f" ({req.mode})" if req.mode else ""

                lines.append(
                    f"‚Ä¢ {username} | {source_text}{mode_text}\n"
                    f"  ${req.amount_usd:.2f} ‚Üí ${req.final_amount_usd:.2f} | {req.method}\n"
                    f"  {req.created_at.strftime('%d.%m %H:%M')}"
                )

            text = "‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–≤–æ–¥—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):</b>\n\n" + "\n\n".join(lines)

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pending_withdrawals")],
                [InlineKeyboardButton(text="üîô –ö –≤—ã–≤–æ–¥–∞–º", callback_data="stats_withdrawals")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)