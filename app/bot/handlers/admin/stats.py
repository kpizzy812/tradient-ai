# app/bot/handlers/admin/stats.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from sqlalchemy.orm import Session
from sqlalchemy import func, and_
from datetime import datetime, timedelta

from app.core.db import SessionLocal
from app.models.users import User
from app.models.investments import Investment
from app.models.deposit_request import DepositRequest
from app.models.withdraw_request import WithdrawRequest
from app.models.income_log import IncomeLog
from app.bot.states.admin import AdminStates
from app.bot.keyboards.admin import get_back_to_stats_kb, get_back_to_menu_kb
from app.services.logic import t

router = Router()


@router.callback_query(StateFilter(AdminStates.stats_menu), F.data == "stats_general")
async def show_general_stats(call: CallbackQuery, state: FSMContext):
    """–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    db = SessionLocal()

    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        total_users = db.query(User).count()
        active_users = db.query(User).filter(User.deposit_usd > 0).count()

        total_deposits = db.query(func.sum(User.deposit_usd)).scalar() or 0
        total_profits = db.query(func.sum(User.profit_usd)).scalar() or 0
        total_ref_balance = db.query(func.sum(User.ref_balance)).scalar() or 0

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        active_investments = db.query(func.sum(Investment.amount_usd)).filter(
            Investment.is_active == True
        ).scalar() or 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        month_ago = datetime.utcnow() - timedelta(days=30)
        new_users_month = db.query(User).filter(User.created_at >= month_ago).count()

        # –°—Ä–µ–¥–Ω–µ–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        avg_deposit = total_deposits / max(active_users, 1)
        avg_profit = total_profits / max(active_users, 1)

        text = (
            "üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</b>\n\n"
            f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users:,}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users:,} ({active_users / max(total_users, 1) * 100:.1f}%)\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞ –º–µ—Å—è—Ü: {new_users_month:,}\n\n"

            f"üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>\n"
            f"‚Ä¢ –û–±—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${total_deposits:,.2f}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${active_investments:,.2f}\n"
            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total_profits:,.2f}\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ: ${total_ref_balance:,.2f}\n\n"

            f"üìà <b>–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –î–µ–ø–æ–∑–∏—Ç –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ: ${avg_deposit:.2f}\n"
            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ: ${avg_profit:.2f}\n"
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_general")],
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)
    await state.set_state(AdminStates.stats_general)


@router.callback_query(StateFilter(AdminStates.stats_menu), F.data == "stats_deposits")
async def show_deposits_stats(call: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π"""
    db = SessionLocal()

    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫
        total_requests = db.query(DepositRequest).count()
        pending_requests = db.query(DepositRequest).filter(
            DepositRequest.status == "pending"
        ).count()
        approved_requests = db.query(DepositRequest).filter(
            DepositRequest.status == "approved"
        ).count()
        declined_requests = db.query(DepositRequest).filter(
            DepositRequest.status == "declined"
        ).count()

        # –°—É–º–º—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_amount = db.query(func.sum(DepositRequest.amount_usd)).filter(
            DepositRequest.status == "pending"
        ).scalar() or 0

        approved_amount = db.query(func.sum(DepositRequest.amount_usd)).filter(
            DepositRequest.status == "approved"
        ).scalar() or 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É–ª–∞–º
        pool_stats = db.query(
            DepositRequest.pool_name,
            func.count(DepositRequest.id).label('count'),
            func.sum(DepositRequest.amount_usd).label('total')
        ).filter(
            DepositRequest.status == "approved"
        ).group_by(DepositRequest.pool_name).all()

        # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        week_ago = datetime.utcnow() - timedelta(days=7)
        week_deposits = db.query(func.sum(DepositRequest.amount_usd)).filter(
            and_(
                DepositRequest.status == "approved",
                DepositRequest.created_at >= week_ago
            )
        ).scalar() or 0

        # –ó–∞ —Å–µ–≥–æ–¥–Ω—è
        today = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        today_deposits = db.query(func.sum(DepositRequest.amount_usd)).filter(
            and_(
                DepositRequest.status == "approved",
                DepositRequest.created_at >= today
            )
        ).scalar() or 0

        pool_lines = "\n".join([
            f"‚Ä¢ {pool}: {count} –∑–∞—è–≤–æ–∫, ${total:,.2f}"
            for pool, count, total in pool_stats
        ])

        text = (
            "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π</b>\n\n"
            f"üìã <b>–ó–∞—è–≤–∫–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_requests:,}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {pending_requests:,} (${pending_amount:,.2f})\n"
            f"‚Ä¢ –û–¥–æ–±—Ä–µ–Ω–æ: {approved_requests:,} (${approved_amount:,.2f})\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {declined_requests:,}\n\n"

            f"üìä <b>–ü–æ –ø–µ—Ä–∏–æ–¥–∞–º:</b>\n"
            f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: ${today_deposits:,.2f}\n"
            f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: ${week_deposits:,.2f}\n\n"

            f"üè¶ <b>–ü–æ –ø—É–ª–∞–º:</b>\n{pool_lines or '‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="pending_deposits"),
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_deposits")
                ],
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)
    await state.set_state(AdminStates.stats_deposits)


@router.callback_query(StateFilter(AdminStates.stats_menu), F.data == "stats_withdrawals")
async def show_withdrawals_stats(call: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤"""
    db = SessionLocal()

    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥
        total_requests = db.query(WithdrawRequest).count()
        pending_requests = db.query(WithdrawRequest).filter(
            WithdrawRequest.status == "pending"
        ).count()
        approved_requests = db.query(WithdrawRequest).filter(
            WithdrawRequest.status == "approved"
        ).count()

        # –°—É–º–º—ã –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        pending_amount = db.query(func.sum(WithdrawRequest.amount_usd)).filter(
            WithdrawRequest.status == "pending"
        ).scalar() or 0

        approved_amount = db.query(func.sum(WithdrawRequest.final_amount_usd)).filter(
            WithdrawRequest.status == "approved"
        ).scalar() or 0

        # –ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        balance_withdrawals = db.query(func.sum(WithdrawRequest.amount_usd)).filter(
            and_(
                WithdrawRequest.source == "balance",
                WithdrawRequest.status == "approved"
            )
        ).scalar() or 0

        investment_withdrawals = db.query(func.sum(WithdrawRequest.amount_usd)).filter(
            and_(
                WithdrawRequest.source == "investment",
                WithdrawRequest.status == "approved"
            )
        ).scalar() or 0

        # –ü–æ –º–µ—Ç–æ–¥–∞–º –≤—ã–≤–æ–¥–∞
        method_stats = db.query(
            WithdrawRequest.method,
            func.count(WithdrawRequest.id).label('count'),
            func.sum(WithdrawRequest.final_amount_usd).label('total')
        ).filter(
            WithdrawRequest.status == "approved"
        ).group_by(WithdrawRequest.method).all()

        method_lines = "\n".join([
            f"‚Ä¢ {method}: {count} —à—Ç, ${total:,.2f}"
            for method, count, total in method_stats
        ])

        text = (
            "üìâ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—ã–≤–æ–¥–æ–≤</b>\n\n"
            f"üìã <b>–ó–∞—è–≤–∫–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_requests:,}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {pending_requests:,} (${pending_amount:,.2f})\n"
            f"‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ: {approved_requests:,} (${approved_amount:,.2f})\n\n"

            f"üìä <b>–ü–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:</b>\n"
            f"‚Ä¢ –° –±–∞–ª–∞–Ω—Å–∞: ${balance_withdrawals:,.2f}\n"
            f"‚Ä¢ –ò–∑ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: ${investment_withdrawals:,.2f}\n\n"

            f"üí≥ <b>–ü–æ –º–µ—Ç–æ–¥–∞–º:</b>\n{method_lines or '‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n"
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ", callback_data="pending_withdrawals"),
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_withdrawals")
                ],
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)
    await state.set_state(AdminStates.stats_withdrawals)


@router.callback_query(F.data == "pending_deposits")
async def show_pending_deposits(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"""
    db = SessionLocal()

    try:
        pending_requests = db.query(DepositRequest).filter(
            DepositRequest.status == "pending"
        ).order_by(DepositRequest.created_at.desc()).limit(10).all()

        if not pending_requests:
            text = "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
        else:
            lines = []
            for req in pending_requests:
                user = db.query(User).filter(User.id == req.user_id).first()
                username = f"@{user.username}" if user.username else f"ID{user.tg_id}"

                lines.append(
                    f"‚Ä¢ {username} | {req.pool_name} | ${req.amount_usd:.2f}\n"
                    f"  {req.created_at.strftime('%d.%m %H:%M')}"
                )

            text = "‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):</b>\n\n" + "\n\n".join(lines)

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pending_deposits")],
                [InlineKeyboardButton(text="üîô –ö –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è–º", callback_data="stats_deposits")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)


@router.callback_query(F.data == "pending_withdrawals")
async def show_pending_withdrawals(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –≤—ã–≤–æ–¥—ã"""
    db = SessionLocal()

    try:
        pending_requests = db.query(WithdrawRequest).filter(
            WithdrawRequest.status == "pending"
        ).order_by(WithdrawRequest.created_at.desc()).limit(10).all()

        if not pending_requests:
            text = "‚úÖ –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥"
        else:
            lines = []
            for req in pending_requests:
                user = db.query(User).filter(User.id == req.user_id).first()
                username = f"@{user.username}" if user.username else f"ID{user.tg_id}"

                source_text = "–ë–∞–ª–∞–Ω—Å" if req.source == "balance" else f"–ü—É–ª {req.pool_name}"
                mode_text = f" ({req.mode})" if req.mode else ""

                lines.append(
                    f"‚Ä¢ {username} | {source_text}{mode_text}\n"
                    f"  ${req.amount_usd:.2f} ‚Üí ${req.final_amount_usd:.2f} | {req.method}\n"
                    f"  {req.created_at.strftime('%d.%m %H:%M')}"
                )

            text = "‚è≥ <b>–û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–≤–æ–¥—ã (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):</b>\n\n" + "\n\n".join(lines)

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="pending_withdrawals")],
                [InlineKeyboardButton(text="üîô –ö –≤—ã–≤–æ–¥–∞–º", callback_data="stats_withdrawals")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)


@router.callback_query(StateFilter(AdminStates.stats_menu), F.data == "stats_finance")
async def show_finance_stats(call: CallbackQuery, state: FSMContext):
    """–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    db = SessionLocal()

    try:
        # –û–±—â–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_deposits = db.query(func.sum(User.deposit_usd)).scalar() or 0
        total_profits = db.query(func.sum(User.profit_usd)).scalar() or 0
        total_ref_balance = db.query(func.sum(User.ref_balance)).scalar() or 0

        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        active_investments = db.query(func.sum(Investment.amount_usd)).filter(
            Investment.is_active == True
        ).scalar() or 0

        # –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
        pending_withdrawals = db.query(func.sum(WithdrawRequest.amount_usd)).filter(
            WithdrawRequest.status == "pending"
        ).scalar() or 0

        completed_withdrawals = db.query(func.sum(WithdrawRequest.final_amount_usd)).filter(
            WithdrawRequest.status.in_(["executed", "auto_paid"])
        ).scalar() or 0

        # –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è (–æ–±—â–∏–π –±–∞–ª–∞–Ω—Å —Å–∏—Å—Ç–µ–º—ã)
        total_system_balance = total_deposits - completed_withdrawals

        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
        deposit_to_withdrawal_ratio = (completed_withdrawals / max(total_deposits, 1)) * 100
        profit_to_deposit_ratio = (total_profits / max(total_deposits, 1)) * 100

        text = (
            "üí∞ <b>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"

            f"üìà <b>–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –û–±—â–∏–π –¥–µ–ø–æ–∑–∏—Ç: ${total_deposits:,.2f}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ${active_investments:,.2f}\n\n"

            f"üìâ <b>–í—ã–ø–ª–∞—Ç—ã:</b>\n"
            f"‚Ä¢ –í—ã–ø–ª–∞—á–µ–Ω–æ: ${completed_withdrawals:,.2f}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: ${pending_withdrawals:,.2f}\n"
            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${total_profits:,.2f}\n"
            f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–µ: ${total_ref_balance:,.2f}\n\n"

            f"üìä <b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –ö–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è: ${total_system_balance:,.2f}\n"
            f"‚Ä¢ –ö–æ—ç—Ñ. –≤—ã–ø–ª–∞—Ç: {deposit_to_withdrawal_ratio:.1f}%\n"
            f"‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {profit_to_deposit_ratio:.1f}%\n"
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_finance")],
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)
    await state.set_state(AdminStates.stats_finance)


@router.callback_query(StateFilter(AdminStates.stats_menu), F.data == "stats_users")
async def show_users_stats(call: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    db = SessionLocal()

    try:
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_users = db.query(User).count()
        active_users = db.query(User).filter(User.deposit_usd > 0).count()

        # –ü–æ –ø–µ—Ä–∏–æ–¥–∞–º
        today = datetime.utcnow().replace(hour=0, minute=0, second=0, microsecond=0)
        week_ago = today - timedelta(days=7)
        month_ago = today - timedelta(days=30)

        new_today = db.query(User).filter(User.created_at >= today).count()
        new_week = db.query(User).filter(User.created_at >= week_ago).count()
        new_month = db.query(User).filter(User.created_at >= month_ago).count()

        # –ü–æ —Å—É–º–º–µ –¥–µ–ø–æ–∑–∏—Ç–∞
        users_100_plus = db.query(User).filter(User.deposit_usd >= 100).count()
        users_500_plus = db.query(User).filter(User.deposit_usd >= 500).count()
        users_1000_plus = db.query(User).filter(User.deposit_usd >= 1000).count()

        # –°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        avg_deposit = db.query(func.avg(User.deposit_usd)).filter(User.deposit_usd > 0).scalar() or 0
        avg_profit = db.query(func.avg(User.profit_usd)).filter(User.profit_usd > 0).scalar() or 0

        # –¢–æ–ø-10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–µ–ø–æ–∑–∏—Ç—É
        top_depositors = db.query(User).filter(User.deposit_usd > 0).order_by(
            User.deposit_usd.desc()
        ).limit(5).all()

        top_lines = []
        for i, user in enumerate(top_depositors, 1):
            username = f"@{user.username}" if user.username else f"ID{user.tg_id}"
            top_lines.append(f"{i}. {username} - ${user.deposit_usd:,.2f}")

        text = (
                "üë• <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"

                f"üìä <b>–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:</b>\n"
                f"‚Ä¢ –í—Å–µ–≥–æ: {total_users:,}\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_users:,} ({(active_users / max(total_users, 1) * 100):.1f}%)\n\n"

                f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b>\n"
                f"‚Ä¢ –°–µ–≥–æ–¥–Ω—è: {new_today:,}\n"
                f"‚Ä¢ –ó–∞ –Ω–µ–¥–µ–ª—é: {new_week:,}\n"
                f"‚Ä¢ –ó–∞ –º–µ—Å—è—Ü: {new_month:,}\n\n"

                f"üí∞ <b>–ü–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º:</b>\n"
                f"‚Ä¢ –û—Ç $100: {users_100_plus:,}\n"
                f"‚Ä¢ –û—Ç $500: {users_500_plus:,}\n"
                f"‚Ä¢ –û—Ç $1000: {users_1000_plus:,}\n\n"

                f"üìà <b>–°—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:</b>\n"
                f"‚Ä¢ –î–µ–ø–æ–∑–∏—Ç: ${avg_deposit:.2f}\n"
                f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${avg_profit:.2f}\n\n"

                f"üèÜ <b>–¢–æ–ø-5 –ø–æ –¥–µ–ø–æ–∑–∏—Ç—É:</b>\n" + "\n".join(top_lines or ["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"])
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_users")],
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)
    await state.set_state(AdminStates.stats_users)


@router.callback_query(StateFilter(AdminStates.stats_menu), F.data == "stats_pools")
async def show_pools_stats(call: CallbackQuery, state: FSMContext):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É–ª–∞–º"""
    db = SessionLocal()

    try:
        from app.core.config import settings

        pool_stats = {}

        for pool_name in settings.POOL_LIMITS.keys():
            # –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –ø—É–ª–µ
            active_amount = db.query(func.sum(Investment.amount_usd)).filter(
                and_(Investment.pool_name == pool_name, Investment.is_active == True)
            ).scalar() or 0

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤
            investors_count = db.query(Investment.user_id).filter(
                and_(Investment.pool_name == pool_name, Investment.is_active == True)
            ).distinct().count()

            # –í—Å–µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –ø—É–ª (–≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
            total_invested = db.query(func.sum(Investment.amount_usd)).filter(
                Investment.pool_name == pool_name
            ).scalar() or 0

            # –ó–∞—è–≤–∫–∏ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –ø—É–ª–∞
            pending_deposits = db.query(func.sum(DepositRequest.amount_usd)).filter(
                and_(
                    DepositRequest.pool_name == pool_name,
                    DepositRequest.status == "pending"
                )
            ).scalar() or 0

            pool_stats[pool_name] = {
                "active_amount": active_amount,
                "investors": investors_count,
                "total_invested": total_invested,
                "pending": pending_deposits
            }

        text = "üè¶ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—É–ª–∞–º</b>\n\n"

        for pool_name, stats in pool_stats.items():
            limits = settings.POOL_LIMITS.get(pool_name, {})
            yield_range = settings.POOL_YIELD_RANGES.get(pool_name, (0, 0))
            coeff = settings.POOL_COEFFICIENTS.get(pool_name, 1.0)

            # –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
            max_capacity = limits.get("max", 1) * stats["investors"] if stats["investors"] > 0 else limits.get("max", 1)
            fill_percent = (stats["active_amount"] / max_capacity * 100) if max_capacity > 0 else 0

            text += (
                f"<b>{pool_name}:</b>\n"
                f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ: ${stats['active_amount']:,.2f}\n"
                f"‚Ä¢ –ò–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤: {stats['investors']:,}\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ: ${stats['total_invested']:,.2f}\n"
                f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: ${stats['pending']:,.2f}\n"
                f"‚Ä¢ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {yield_range[0]:.1f}%-{yield_range[1]:.1f}% (x{coeff})\n"
                f"‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: {fill_percent:.1f}%\n\n"
            )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="stats_pools")],
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb, parse_mode="HTML")
    await state.set_state(AdminStates.stats_pools)


@router.callback_query(StateFilter(AdminStates.stats_menu), F.data == "stats_period")
async def show_period_selection(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üìÖ –°–µ–≥–æ–¥–Ω—è", callback_data="period_today"),
                InlineKeyboardButton(text="üìÖ –í—á–µ—Ä–∞", callback_data="period_yesterday")
            ],
            [
                InlineKeyboardButton(text="üìÖ 7 –¥–Ω–µ–π", callback_data="period_week"),
                InlineKeyboardButton(text="üìÖ 30 –¥–Ω–µ–π", callback_data="period_month")
            ],
            [
                InlineKeyboardButton(text="üìÖ 90 –¥–Ω–µ–π", callback_data="period_quarter"),
                InlineKeyboardButton(text="üìÖ –ì–æ–¥", callback_data="period_year")
            ],
            [
                InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")
            ]
        ]
    )

    await call.message.edit_text(
        "üìÖ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=kb
    )
    await state.set_state(AdminStates.stats_period)


@router.callback_query(StateFilter(AdminStates.stats_period), F.data.startswith("period_"))
async def show_period_stats(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    period = call.data.split("_")[1]

    db = SessionLocal()

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏
        now = datetime.utcnow()

        if period == "today":
            start_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
            period_name = "—Å–µ–≥–æ–¥–Ω—è"
        elif period == "yesterday":
            start_date = (now - timedelta(days=1)).replace(hour=0, minute=0, second=0, microsecond=0)
            end_date = now.replace(hour=0, minute=0, second=0, microsecond=0)
            period_name = "–≤—á–µ—Ä–∞"
        elif period == "week":
            start_date = now - timedelta(days=7)
            period_name = "–∑–∞ 7 –¥–Ω–µ–π"
        elif period == "month":
            start_date = now - timedelta(days=30)
            period_name = "–∑–∞ 30 –¥–Ω–µ–π"
        elif period == "quarter":
            start_date = now - timedelta(days=90)
            period_name = "–∑–∞ 90 –¥–Ω–µ–π"
        elif period == "year":
            start_date = now - timedelta(days=365)
            period_name = "–∑–∞ –≥–æ–¥"
        else:
            start_date = now - timedelta(days=7)
            period_name = "–∑–∞ 7 –¥–Ω–µ–π"

        # –î–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –∫—Ä–æ–º–µ "–≤—á–µ—Ä–∞" –∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ = —Å–µ–π—á–∞—Å
        if period != "yesterday":
            end_date = now

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        new_users = db.query(User).filter(
            User.created_at >= start_date,
            User.created_at <= end_date
        ).count()

        # –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        deposits_filter = and_(
            DepositRequest.created_at >= start_date,
            DepositRequest.created_at <= end_date,
            DepositRequest.status == "approved"
        )
        deposits_count = db.query(DepositRequest).filter(deposits_filter).count()
        deposits_amount = db.query(func.sum(DepositRequest.amount_usd)).filter(deposits_filter).scalar() or 0

        # –í—ã–≤–æ–¥—ã
        withdraws_filter = and_(
            WithdrawRequest.created_at >= start_date,
            WithdrawRequest.created_at <= end_date,
            WithdrawRequest.status.in_(["executed", "auto_paid"])
        )
        withdraws_count = db.query(WithdrawRequest).filter(withdraws_filter).count()
        withdraws_amount = db.query(func.sum(WithdrawRequest.final_amount_usd)).filter(withdraws_filter).scalar() or 0

        # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ç–æ –¥–µ–ª–∞–ª –¥–µ–ø–æ–∑–∏—Ç—ã)
        active_users = db.query(DepositRequest.user_id).filter(deposits_filter).distinct().count()

        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è
        net_flow = deposits_amount - withdraws_amount
        avg_deposit = deposits_amount / max(deposits_count, 1)
        avg_withdraw = withdraws_amount / max(withdraws_count, 1)

        text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {period_name}</b>\n\n"
            f"üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {start_date.strftime('%d.%m.%Y')}"
        )

        if period == "yesterday":
            text += f" - {end_date.strftime('%d.%m.%Y')}"
        elif period == "today":
            text += f" - —Å–µ–π—á–∞—Å"
        else:
            text += f" - {end_date.strftime('%d.%m.%Y')}"

        text += (
            f"\n\nüë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: {new_users:,}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö (—Å –¥–µ–ø–æ–∑–∏—Ç–∞–º–∏): {active_users:,}\n\n"

            f"üìà <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {deposits_count:,}\n"
            f"‚Ä¢ –°—É–º–º–∞: ${deposits_amount:,.2f}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${avg_deposit:.2f}\n\n"

            f"üìâ <b>–í—ã–≤–æ–¥—ã:</b>\n"
            f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {withdraws_count:,}\n"
            f"‚Ä¢ –°—É–º–º–∞: ${withdraws_amount:,.2f}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${avg_withdraw:.2f}\n\n"

            f"üí∞ <b>–ò—Ç–æ–≥–∏:</b>\n"
            f"‚Ä¢ –ß–∏—Å—Ç—ã–π –ø—Ä–∏—Ç–æ–∫: ${net_flow:,.2f}\n"
            f"‚Ä¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–±–æ—Ä–æ—Ç–∞: {(withdraws_amount / max(deposits_amount, 1)):.2f}\n"
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"period_{period}"),
                    InlineKeyboardButton(text="üìÖ –î—Ä—É–≥–æ–π –ø–µ—Ä–∏–æ–¥", callback_data="stats_period")
                ],
                [InlineKeyboardButton(text="üîô –ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_stats")]
            ]
        )

    finally:
        db.close()

    await call.message.edit_text(text, reply_markup=kb)


# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤
@router.callback_query(F.data == "stats_finance")
async def show_finance_stats_redirect(call: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∏—Ä–µ–∫—Ç –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    await state.set_state(AdminStates.stats_menu)
    await show_finance_stats(call, state)