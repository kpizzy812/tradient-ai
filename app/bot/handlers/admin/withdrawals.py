# app/bot/handlers/admin/withdrawals.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from sqlalchemy.orm import Session
from sqlalchemy import func, desc
from datetime import datetime, timedelta

from app.core.db import SessionLocal
from app.models.users import User
from app.models.withdraw_request import WithdrawRequest
from app.bot.states.admin import AdminStates

router = Router()

ITEMS_PER_PAGE = 20


def get_withdraw_filter_kb(current_filter="all"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥"""
    filters = {
        "all": "–í—Å–µ",
        "pending": "–û–∂–∏–¥–∞—é—Ç",
        "executed": "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
        "auto_paid": "–ê–≤—Ç–æ",
        "declined": "–û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
    }

    buttons = []
    row = []
    for key, text in filters.items():
        mark = "‚úÖ " if key == current_filter else ""
        row.append(InlineKeyboardButton(
            text=f"{mark}{text}",
            callback_data=f"withdraws_filter_{key}"
        ))
        if len(row) == 2:
            buttons.append(row)
            row = []

    if row:
        buttons.append(row)

    buttons.append([
        InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_menu")
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_withdraw_list_kb(page=0, total_pages=0, status_filter="all", requests_on_page=[]):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    buttons = []

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞—è–≤–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è pending –∑–∞—è–≤–æ–∫)
    request_buttons = []
    for req in requests_on_page:
        if req.status == "pending":
            request_buttons.append(InlineKeyboardButton(
                text=f"#{req.id} üëÅ",
                callback_data=f"view_withdraw_{req.id}"
            ))

    # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∑–∞—è–≤–æ–∫ –ø–æ 3 –≤ —Ä—è–¥
    for i in range(0, len(request_buttons), 3):
        row = request_buttons[i:i + 3]
        buttons.append(row)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        nav_row = []
        if page > 0:
            nav_row.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è",
                callback_data=f"withdraws_page_{page - 1}_{status_filter}"
            ))

        nav_row.append(InlineKeyboardButton(
            text=f"{page + 1}/{total_pages}",
            callback_data="withdraws_noop"
        ))

        if page < total_pages - 1:
            nav_row.append(InlineKeyboardButton(
                text="‚û°Ô∏è",
                callback_data=f"withdraws_page_{page + 1}_{status_filter}"
            ))

        buttons.append(nav_row)

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    buttons.extend([
        [
            InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"withdraws_page_{page}_{status_filter}"),
            InlineKeyboardButton(text="üìä –§–∏–ª—å—Ç—Ä—ã", callback_data="admin_withdraws")
        ],
        [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_menu")]
    ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


@router.callback_query(F.data == "admin_withdraws")
async def show_withdraws_filters(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥"""
    db = SessionLocal()

    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        stats = {}
        for status in ["pending", "executed", "auto_paid", "declined"]:
            count = db.query(WithdrawRequest).filter(WithdrawRequest.status == status).count()
            stats[status] = count

        total = db.query(WithdrawRequest).count()

        # –°—É–º–º–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
        pending_amount = db.query(func.sum(WithdrawRequest.amount_usd)).filter(
            WithdrawRequest.status == "pending"
        ).scalar() or 0

        text = (
            "üìâ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –≤—ã–≤–æ–¥</b>\n\n"
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {total:,}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç: {stats['pending']:,} (${pending_amount:,.2f})\n"
            f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['executed']:,}\n"
            f"‚Ä¢ –ê–≤—Ç–æ–≤—ã–ø–ª–∞—Ç–∞: {stats['auto_paid']:,}\n"
            f"‚Ä¢ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats['declined']:,}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
        )

        await call.message.edit_text(text, reply_markup=get_withdraw_filter_kb())
        await state.set_state(AdminStates.withdraws_filter)

    finally:
        db.close()


@router.callback_query(StateFilter(AdminStates.withdraws_filter), F.data.startswith("withdraws_filter_"))
async def show_withdraws_list(call: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–æ–º"""
    status_filter = call.data.split("_")[-1]
    await show_withdraws_page(call, state, 0, status_filter)


@router.callback_query(F.data.startswith("withdraws_page_"))
async def handle_withdraws_pagination(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    parts = call.data.split("_")
    page = int(parts[2])
    status_filter = parts[3] if len(parts) > 3 else "all"
    await show_withdraws_page(call, state, page, status_filter)


async def show_withdraws_page(call: CallbackQuery, state: FSMContext, page: int, status_filter: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥"""
    db = SessionLocal()

    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º
        query = db.query(WithdrawRequest)

        if status_filter != "all":
            query = query.filter(WithdrawRequest.status == status_filter)

        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        total_count = query.count()
        total_pages = (total_count + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE

        if total_pages == 0:
            await call.message.edit_text(
                f"üìâ <b>–ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ ({status_filter})</b>\n\n"
                "üö´ –ó–∞—è–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ",
                reply_markup=get_withdraw_filter_kb(status_filter)
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        requests = query.order_by(desc(WithdrawRequest.created_at)).offset(
            page * ITEMS_PER_PAGE
        ).limit(ITEMS_PER_PAGE).all()

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        status_names = {
            "pending": "‚è≥ –û–∂–∏–¥–∞—é—Ç",
            "executed": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
            "auto_paid": "ü§ñ –ê–≤—Ç–æ–≤—ã–ø–ª–∞—Ç–∞",
            "declined": "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ",
            "all": "üìâ –í—Å–µ –∑–∞—è–≤–∫–∏"
        }

        text = f"{status_names.get(status_filter, 'üìâ –ó–∞—è–≤–∫–∏')} –Ω–∞ –≤—ã–≤–æ–¥\n\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏
        for i, req in enumerate(requests, 1):
            user = db.query(User).filter(User.id == req.user_id).first()
            username = f"@{user.username}" if user and user.username else f"ID{user.tg_id if user else 'N/A'}"

            status_emoji = {
                "pending": "‚è≥",
                "executed": "‚úÖ",
                "auto_paid": "ü§ñ",
                "declined": "‚ùå"
            }.get(req.status, "‚ùì")

            # –ò—Å—Ç–æ—á–Ω–∏–∫
            source_text = "üí∞ –ë–∞–ª–∞–Ω—Å" if req.source == "balance" else f"üè¶ {req.pool_name or '–ü—É–ª'}"

            # –†–µ–∂–∏–º (–µ—Å–ª–∏ –µ—Å—Ç—å)
            mode_text = ""
            if req.mode:
                mode_text = f" ({req.mode})"

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º clickable –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–ª—è pending –∑–∞—è–≤–æ–∫
            clickable_indicator = " üëÅ" if req.status == "pending" else ""

            text += (
                f"<b>{page * ITEMS_PER_PAGE + i}.</b> {status_emoji} {username}{clickable_indicator}\n"
                f"{source_text}{mode_text}\n"
                f"üíµ ${req.amount_usd:.2f} ‚Üí ${req.final_amount_usd:.2f}\n"
                f"üí≥ {req.method}"
            )

            if req.currency:
                text += f" ({req.currency})"

            text += f"\nüïí {req.created_at.strftime('%d.%m %H:%M')}\n"

            if req.execute_until:
                text += f"‚è∞ –î–æ: {req.execute_until.strftime('%d.%m %H:%M')}\n"

            if req.details and len(req.details) <= 30:
                text += f"üìù <code>{req.details}</code>\n"

            text += "\n"

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        if total_pages > 1:
            text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages} | –í—Å–µ–≥–æ: {total_count}"

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫
        if any(req.status == "pending" for req in requests):
            text += "\n\nüí° –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>#ID üëÅ</b> –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–æ–π"

        await call.message.edit_text(
            text,
            reply_markup=get_withdraw_list_kb(page, total_pages, status_filter, requests),
            parse_mode="HTML"
        )
        await state.set_state(AdminStates.withdraws_list)

    finally:
        db.close()


@router.callback_query(F.data == "withdraws_noop")
async def withdraws_noop(call: CallbackQuery):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    await call.answer()