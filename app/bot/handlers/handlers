from aiogram import Router, types, F, Bot
from aiogram.types import CallbackQuery
from app.models.deposit_request import DepositRequest
from app.services.logic import invest_user, t
from app.core.config import settings
from app.core.db import SessionLocal
from app.models.users import User
from app.services.logic import generate_ref_code
from app.core.logger import logger

router = Router()

@router.message(F.text.startswith("/start"))
async def cmd_start(msg: types.Message):
    db = SessionLocal()
    tg_id = msg.from_user.id
    username = msg.from_user.username
    lang = msg.from_user.language_code or settings.DEFAULT_LANGUAGE
    args = msg.text.split(" ")

    user = db.query(User).filter(User.tg_id == tg_id).first()
    if not user:
        referrer = None
        if len(args) == 2:
            ref_code = args[1].strip()
            referrer = db.query(User).filter(User.ref_code == ref_code).first()

        user = User(
            tg_id=tg_id,
            username=username,
            lang=lang,
            referrer_id=referrer.id if referrer else None,
            ref_code=generate_ref_code(tg_id),
        )
        db.add(user)
        db.commit()

        if referrer:
            try:
                await msg.bot.send_message(  # ‚¨Ö –≤–æ—Ç –æ–Ω–æ!
                    chat_id=referrer.tg_id,
                    text=t("new_ref", referrer.lang).format(name=msg.from_user.full_name)
                )
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {e}")

    db.close()
    await msg.answer(t("start_welcome", lang))


@router.message(F.text.startswith("/set_yield "))
async def cmd_set_yield(msg: types.Message):
    if msg.from_user.id not in settings.ADMIN_TG_IDS:
        return await msg.answer(t("not_admin", msg.from_user.language_code))

    try:
        value = float(msg.text.split()[1])
    except:
        return await msg.answer("‚ùå –ü—Ä–∏–º–µ—Ä: /set_yield 3.1")

    from app.services.yielding import distribute_daily_yield

    db = SessionLocal()
    try:
        distribute_daily_yield(db, value)
        await msg.answer(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {value}%")
    finally:
        db.close()


@router.callback_query(F.data.startswith("approve_"))
async def callback_approve(call: CallbackQuery, bot: Bot):
    request_id = int(call.data.split("_")[1])
    db = SessionLocal()

    request = db.query(DepositRequest).filter(DepositRequest.id == request_id).first()
    if not request or request.status != "pending":
        await call.answer("‚õîÔ∏è –ó–∞—è–≤–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
        db.close()
        return

    user = db.query(User).filter(User.id == request.user_id).first()
    if not user:
        await call.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        db.close()
        return

    if user.hold_balance > 0:
        total = request.amount_usd + user.hold_balance
        success = invest_user(db, user, total, request.pool_name, bot)
        user.hold_balance = 0.0
    else:
        success = invest_user(db, user, request.amount_usd, request.pool_name, bot)

    if success:
        request.status = "approved"
        db.commit()
        await call.answer("‚úÖ –ü—Ä–∏–Ω—è—Ç–æ")
        try:
            await bot.send_message(user.tg_id, t("deposit_approved", user.lang))
        except:
            pass
    else:
        await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        db.rollback()

    db.close()


@router.callback_query(F.data.startswith("decline_"))
async def callback_decline(call: CallbackQuery, bot: Bot):
    request_id = int(call.data.split("_")[1])
    db = SessionLocal()
    request = db.query(DepositRequest).filter(DepositRequest.id == request_id).first()

    if not request or request.status != "pending":
        await call.answer("‚õîÔ∏è –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", show_alert=True)
        db.close()
        return

    request.status = "declined"
    db.commit()

    user = db.query(User).filter(User.id == request.user_id).first()
    if user:
        # –≤–µ—Ä–Ω—É—Ç—å —É–¥–µ—Ä–∂–∞–Ω–Ω–æ–µ, –µ—Å–ª–∏ –±—ã–ª–æ
        if user.hold_balance > 0:
            user.profit_usd += user.hold_balance
            user.hold_balance = 0.0

        try:
            await bot.send_message(user.tg_id, t("deposit_declined", user.lang))
        except:
            pass

    await call.answer("üö´ –û—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    db.close()


@router.callback_query(F.data.startswith("delete_"))
async def callback_delete(call: CallbackQuery):
    request_id = int(call.data.split("_")[1])
    db = SessionLocal()
    request = db.query(DepositRequest).filter(DepositRequest.id == request_id).first()

    if not request:
        await call.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        db.close()
        return

    request.status = "deleted"
    db.commit()
    await call.answer("üóë –£–¥–∞–ª–µ–Ω–æ")
    db.close()


from app.models.withdraw_request import WithdrawRequest
from aiogram.types import CallbackQuery

@router.callback_query(F.data.startswith("withdraw_approve_"))
async def callback_withdraw_approve(call: CallbackQuery, bot: Bot):
    request_id = int(call.data.split("_")[-1])
    db = SessionLocal()
    request = db.query(WithdrawRequest).filter_by(id=request_id, status="pending").first()

    if not request:
        await call.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
        db.close()
        return

    request.status = "approved"
    db.commit()

    user = db.query(User).filter_by(id=request.user_id).first()
    if user:
        try:
            await bot.send_message(user.tg_id, t("withdraw_approved", user.lang))
        except:
            pass

    await call.answer("‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞")
    db.close()


@router.callback_query(F.data.startswith("withdraw_decline_"))
async def callback_withdraw_decline(call: CallbackQuery, bot: Bot):
    request_id = int(call.data.split("_")[-1])
    db = SessionLocal()
    request = db.query(WithdrawRequest).filter_by(id=request_id, status="pending").first()

    if not request:
        await call.answer("‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
        db.close()
        return

    request.status = "declined"

    user = db.query(User).filter_by(id=request.user_id).first()
    if user and request.source == "balance":
        user.profit_usd += request.amount_usd

    db.commit()

    if user:
        try:
            await bot.send_message(user.tg_id, t("withdraw_declined", user.lang))
        except:
            pass

    await call.answer("üö´ –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    db.close()
