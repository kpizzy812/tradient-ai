# app/services/smart_trade_generator.py - –ù–û–í–´–ô –§–ê–ô–õ
import random
import os
from datetime import datetime, timedelta, time as dtime
from sqlalchemy import func
from app.core.utils.binance import get_candles
from app.models.trades import Trade
from app.core.db import SessionLocal
from app.core.logger import logger
from app.core.config import settings
import pytz

msk = pytz.timezone("Europe/Moscow")

CHARTS_DIR = "static/trade_charts"
TICKERS = [
    "BTC/USDT", "ETH/USDT", "SOL/USDT", "OP/USDT", "TON/USDT", "ARB/USDT",
    "MATIC/USDT", "SUI/USDT", "AVAX/USDT", "APT/USDT", "INJ/USDT", "LDO/USDT",
    "LINK/USDT", "RNDR/USDT", "TIA/USDT", "NEAR/USDT"
]
EXCHANGES = ["Binance", "Bybit", "OKX"]

_last_ticker = None

EXCHANGE_COLORS = {
    "Binance": "üü°",
    "Bybit": "üü†",
    "OKX": "‚ö´Ô∏è",
}

def get_trading_day_bounds():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è (18:00-18:00 –ú–°–ö)"""
    now_utc = datetime.utcnow()

    # –í—Ä–µ–º—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ UTC
    finalize_hour_utc = settings.YIELD_TIME_UTC_HOUR

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è
    if now_utc.hour >= finalize_hour_utc:
        # –ü–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ - —Ç–µ–∫—É—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å
        start_utc = datetime.combine(now_utc.date(), dtime(finalize_hour_utc, 0))
        end_utc = start_utc + timedelta(days=1)
    else:
        # –î–æ –≤—Ä–µ–º–µ–Ω–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ - –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å
        start_utc = datetime.combine(now_utc.date() - timedelta(days=1), dtime(finalize_hour_utc, 0))
        end_utc = datetime.combine(now_utc.date(), dtime(finalize_hour_utc, 0))

    return start_utc, end_utc, now_utc


def get_current_day_stats():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è"""
    db = SessionLocal()
    try:
        start_utc, end_utc, now_utc = get_trading_day_bounds()

        # –¢–µ–∫—É—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
        current_yield = db.query(func.sum(Trade.result_pct)).filter(
            Trade.created_at >= start_utc,
            Trade.created_at < min(end_utc, now_utc)
        ).scalar() or 0.0

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–π–¥–æ–≤
        trades_count = db.query(Trade).filter(
            Trade.created_at >= start_utc,
            Trade.created_at < min(end_utc, now_utc)
        ).count()

        # –í—Ä–µ–º—è –¥–æ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        hours_left = (end_utc - now_utc).total_seconds() / 3600

        return {
            'current_yield': round(current_yield, 2),
            'trades_count': trades_count,
            'hours_left': max(hours_left, 0),
            'start_utc': start_utc,
            'end_utc': end_utc,
            'is_active': hours_left > 0
        }
    finally:
        db.close()


def calculate_target_yield(stats):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–ª–µ–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–π–¥–∞"""
    current_yield = stats['current_yield']
    hours_left = stats['hours_left']

    if hours_left <= 0:
        return None  # –¢–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å –∑–∞–∫–æ–Ω—á–µ–Ω

    target_min, target_max = settings.DAILY_YIELD_RANGE
    target_center = (target_min + target_max) / 2

    # –ï—Å–ª–∏ —É–∂–µ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
    if target_min <= current_yield <= target_max and hours_left > 2:
        return random.uniform(-0.3, 0.5)

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å/—É–±—Ä–∞—Ç—å
    if current_yield < target_min:
        # –ù–µ–¥–æ–±–∏—Ä–∞–µ–º
        needed = target_center - current_yield
        urgency = 1.0 if hours_left > 4 else 2.0  # –£–¥–≤–∞–∏–≤–∞–µ–º –µ—Å–ª–∏ –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏
        return min(needed * urgency / max(hours_left, 1), 2.0)  # –ú–∞–∫—Å–∏–º—É–º 2% –∑–∞ —Ç—Ä–µ–π–¥

    elif current_yield > target_max:
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º
        excess = current_yield - target_center
        urgency = 1.0 if hours_left > 4 else 2.0
        return max(-excess * urgency / max(hours_left, 1), -2.0)  # –ú–∞–∫—Å–∏–º—É–º -2% –∑–∞ —Ç—Ä–µ–π–¥

    else:
        # –í –¥–∏–∞–ø–∞–∑–æ–Ω–µ - –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º
        return random.uniform(-0.5, 0.5)


def calculate_next_trade_delay(stats):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–π–¥–∞"""
    current_yield = stats['current_yield']
    hours_left = stats['hours_left']

    if hours_left <= 0:
        return None

    target_min, target_max = settings.DAILY_YIELD_RANGE
    base_min, base_max = settings.TRADE_FREQUENCY_MINUTES

    # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    base_delay = random.randint(base_min, base_max)

    # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏
    if hours_left <= settings.CORRECTION_THRESHOLD_HOURS:
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è - —É—á–∞—â–∞–µ–º —Ç—Ä–µ–π–¥—ã
        if current_yield < target_min or current_yield > target_max:
            base_delay = random.randint(15, 30)  # –ö–∞–∂–¥—ã–µ 15-30 –º–∏–Ω—É—Ç
        else:
            base_delay = random.randint(20, 45)  # –ö–∞–∂–¥—ã–µ 20-45 –º–∏–Ω—É—Ç

    elif hours_left <= 4:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
        if current_yield < target_min * 0.7 or current_yield > target_max * 1.3:
            base_delay = random.randint(20, 40)
        else:
            base_delay = random.randint(base_min, base_max)

    else:
        # –û–±—ã—á–Ω–æ–µ –≤—Ä–µ–º—è - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
        base_delay = random.randint(base_min, base_max)

    return base_delay * 60  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–µ–∫—É–Ω–¥—ã


def find_suitable_trade(target_yield, retries=30):
    """–ò—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–π–¥ —Å –Ω—É–∂–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é"""
    global _last_ticker

    for attempt in range(retries):
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–∫–µ—Ä (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
        tickers_pool = [t for t in TICKERS if t != _last_ticker]
        ticker = random.choice(tickers_pool) if tickers_pool else random.choice(TICKERS)

        exchange = random.choice(EXCHANGES)
        symbol = ticker.replace("/", "")

        try:
            candles = get_candles(symbol=symbol, interval="15m", limit=96)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}: {e}")
            continue

        if len(candles) < 50:
            continue

        # –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
        entry_idx = random.randint(5, len(candles) - 20)
        exit_idx = entry_idx + random.randint(3, min(25, len(candles) - entry_idx - 1))

        entry = candles[entry_idx]
        exit = candles[exit_idx]

        for direction in ["LONG", "SHORT"]:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if direction == "LONG":
                pct = ((exit["close"] - entry["close"]) / entry["close"]) * 100
            else:
                pct = ((entry["close"] - exit["close"]) / entry["close"]) * 100

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if abs(pct) < 0.2:  # –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π
                continue

            if abs(pct) > 3.0:  # –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
            if target_yield is not None:
                diff = abs(pct - target_yield)
                if diff > 1.0:  # –î–æ–ø—É—Å–∫ ¬±1%
                    continue

            _last_ticker = ticker
            return {
                'ticker': ticker,
                'exchange': exchange,
                'direction': direction,
                'entry_idx': entry_idx,
                'exit_idx': exit_idx,
                'entry_price': entry["close"],
                'exit_price': exit["close"],
                'result_pct': round(pct, 2),
                'result_usd': round(pct / 100 * 500, 2),
                'entry_time': entry["time"],
                'exit_time': exit["time"],
                'is_profitable': pct > 0,
                'candles': candles
            }

    return None


def draw_candlestick_chart(candles, entry_idx, exit_idx, trade_id, direction):
    """–†–∏—Å—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–π–¥–∞"""
    import matplotlib.pyplot as plt
    import matplotlib.dates as mdates
    import pandas as pd

    df = pd.DataFrame(candles)
    df.index = pd.DatetimeIndex(df["time"])
    df = df[["open", "high", "low", "close"]].astype(float)

    entry_price = df.iloc[entry_idx]["close"]
    exit_price = df.iloc[exit_idx]["close"]
    entry_time = df.index[entry_idx]
    exit_time = df.index[exit_idx]

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(df.index, df["close"], color="lightblue", linewidth=1.5)

    ax.axhline(entry_price, linestyle="--", color="lime", linewidth=1, alpha=0.7)
    ax.axhline(exit_price, linestyle="--", color="red", linewidth=1, alpha=0.7)

    ax.plot(entry_time, entry_price, marker='o', color='lime', markersize=8)
    ax.plot(exit_time, exit_price, marker='o', color='red', markersize=8)

    ax.set_title(f"Tradient AI Trade ‚Äî {direction}", fontsize=14, weight='bold', color='white', pad=15)
    ax.set_ylabel("–¶–µ–Ω–∞ (USDT)", color='white')
    ax.grid(True, linestyle="--", alpha=0.3)

    ax.tick_params(colors='gray')
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
    plt.xticks(rotation=45)

    fig.patch.set_facecolor('black')
    ax.set_facecolor('black')

    plt.tight_layout()
    path = os.path.join(CHARTS_DIR, f"{trade_id}.png")
    os.makedirs(os.path.dirname(path), exist_ok=True)
    plt.savefig(path, dpi=200)
    plt.close()
    return path


def generate_smart_trade():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–º–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–Ω—è
    stats = get_current_day_stats()

    if not stats['is_active']:
        logger.info("[SMART_TRADE] –¢–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
        return None

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª–µ–≤—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    target_yield = calculate_target_yield(stats)

    if target_yield is None:
        logger.info("[SMART_TRADE] –¢–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω")
        return None

    logger.info(
        f"[SMART_TRADE] –¢–µ–∫—É—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {stats['current_yield']:.2f}%, "
        f"—Ü–µ–ª—å: {target_yield:.2f}%, –≤—Ä–µ–º–µ–Ω–∏: {stats['hours_left']:.1f}—á"
    )

    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–π–¥
    trade_data = find_suitable_trade(target_yield)

    if not trade_data:
        logger.warning("[SMART_TRADE] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–π–¥")
        return None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    db = SessionLocal()
    try:
        trade = Trade(
            ticker=trade_data['ticker'],
            exchange=trade_data['exchange'],
            direction=trade_data['direction'],
            entry_price=trade_data['entry_price'],
            exit_price=trade_data['exit_price'],
            result_pct=trade_data['result_pct'],
            result_usd=trade_data['result_usd'],
            entry_time=trade_data['entry_time'],
            exit_time=trade_data['exit_time'],
            is_profitable=trade_data['is_profitable'],
        )

        db.add(trade)
        db.commit()
        db.refresh(trade)

        # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        try:
            chart_path = draw_candlestick_chart(
                trade_data['candles'],
                trade_data['entry_idx'],
                trade_data['exit_idx'],
                trade.id,
                trade_data['direction']
            )
            trade.chart_path = chart_path
            db.commit()
        except Exception as e:
            logger.error(f"[SMART_TRADE] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

        # –ù–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        new_yield = stats['current_yield'] + trade_data['result_pct']
        target_min, target_max = settings.DAILY_YIELD_RANGE

        status = "‚úÖ" if target_min <= new_yield <= target_max else "‚ö†Ô∏è"

        logger.success(
            f"[SMART_TRADE] {status} –¢—Ä–µ–π–¥ #{trade.id} | {trade_data['ticker']} | "
            f"{trade_data['direction']} | {trade_data['result_pct']:+.2f}% | "
            f"–ò—Ç–æ–≥–æ: {new_yield:.2f}%"
        )

        return trade.id

    except Exception as e:
        logger.error(f"[SMART_TRADE] –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–π–¥–∞: {e}")
        db.rollback()
        return None
    finally:
        db.close()