import random
import os
from datetime import datetime, timedelta, time as dtime
from sqlalchemy import func
from app.core.utils.binance import get_candles
from app.models.trades import Trade
from app.core.db import SessionLocal
from app.core.logger import logger

CHARTS_DIR = "static/trade_charts"
TICKERS = [
    "BTC/USDT", "ETH/USDT", "SOL/USDT", "OP/USDT", "TON/USDT", "ARB/USDT",
    "MATIC/USDT", "SUI/USDT", "AVAX/USDT", "APT/USDT", "INJ/USDT", "LDO/USDT",
    "LINK/USDT", "RNDR/USDT", "TIA/USDT", "NEAR/USDT"
]
EXCHANGES = ["Binance", "Bybit", "OKX"]

# –¶–µ–ª–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
TARGET_DAILY_RANGE = (2.0, 5.0)  # 2-5% –≤ –¥–µ–Ω—å
MIN_VOLATILITY_PCT = 0.3
MAX_SINGLE_TRADE_PCT = 2.0  # –º–∞–∫—Å–∏–º—É–º 2% –∑–∞ –æ–¥–Ω—É —Å–¥–µ–ª–∫—É
TARGET_WINRATE = 0.82  # 82% –≤–∏–Ω—Ä–µ–π—Ç

_last_ticker = None

EXCHANGE_COLORS = {
    "Binance": "üü°",
    "Bybit": "üü†",
    "OKX": "‚ö´Ô∏è",
}


def get_moscow_trading_day():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è –ø–æ –ú–æ—Å–∫–≤–µ (18:00-18:00)"""
    now = datetime.utcnow() + timedelta(hours=3)  # MSK

    if now.hour >= 18:
        # –ü–æ—Å–ª–µ 18:00 - —Å—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å
        start = datetime.combine(now.date(), dtime(18, 0)) - timedelta(hours=3)  # UTC
        end = start + timedelta(days=1)
    else:
        # –î–æ 18:00 - —Å—á–∏—Ç–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å
        start = datetime.combine(now.date() - timedelta(days=1), dtime(18, 0)) - timedelta(hours=3)
        end = start + timedelta(days=1)

    return start, end, now


def calculate_daily_stats(db):
    """–°—á–∏—Ç–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å"""
    start, end, now = get_moscow_trading_day()

    # –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    total_pct = db.query(func.sum(Trade.result_pct)).filter(
        Trade.created_at >= start,
        Trade.created_at < min(end, now)
    ).scalar() or 0.0

    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
    total_trades = db.query(Trade).filter(
        Trade.created_at >= start,
        Trade.created_at < min(end, now)
    ).count()

    # –ü—Ä–∏–±—ã–ª—å–Ω—ã–µ —Å–¥–µ–ª–∫–∏
    profitable_trades = db.query(Trade).filter(
        Trade.created_at >= start,
        Trade.created_at < min(end, now),
        Trade.is_profitable == True
    ).count()

    winrate = profitable_trades / total_trades if total_trades > 0 else 0.0

    # –í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è
    time_left_seconds = (end - now).total_seconds()

    return {
        'total_pct': total_pct,
        'total_trades': total_trades,
        'winrate': winrate,
        'time_left_seconds': max(time_left_seconds, 0),
        'start': start,
        'end': end,
        'now': now
    }


def should_be_profitable(stats):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–ª–∂–Ω–∞ –ª–∏ —Å–ª–µ–¥—É—é—â–∞—è —Å–¥–µ–ª–∫–∞ –±—ã—Ç—å –ø—Ä–∏–±—ã–ª—å–Ω–æ–π"""
    if stats['total_trades'] == 0:
        return True  # –ü–µ—Ä–≤–∞—è —Å–¥–µ–ª–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–∞—è

    current_winrate = stats['winrate']

    if current_winrate < TARGET_WINRATE - 0.05:  # –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç
        return True
    elif current_winrate > TARGET_WINRATE + 0.05:  # –°–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∏–π –≤–∏–Ω—Ä–µ–π—Ç
        return random.random() < 0.3  # 30% —à–∞–Ω—Å –ø—Ä–∏–±—ã–ª—å–Ω–æ–π
    else:
        return random.random() < 0.85  # 85% —à–∞–Ω—Å –ø—Ä–∏–±—ã–ª—å–Ω–æ–π (–Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ —Ü–µ–ª–∏)


def calculate_target_pct(stats):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å–¥–µ–ª–∫–∏"""
    current_pct = stats['total_pct']
    time_left_hours = stats['time_left_seconds'] / 3600

    # –ï—Å–ª–∏ –≤—Ä–µ–º–µ–Ω–∏ –º–∞–ª–æ (–º–µ–Ω—å—à–µ 2 —á–∞—Å–æ–≤), –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–¥–µ–ª–∫–∏
    if time_left_hours < 2:
        return None

    # –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å: 20-35
    estimated_trades_left = max(1, int(time_left_hours * 1.5))  # ~1.5 —Å–¥–µ–ª–∫–∏ –≤ —á–∞—Å

    if current_pct < TARGET_DAILY_RANGE[0]:
        # –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        needed = TARGET_DAILY_RANGE[0] + random.uniform(0, 1.5) - current_pct
        target = needed / estimated_trades_left
        return min(target, MAX_SINGLE_TRADE_PCT)
    elif current_pct > TARGET_DAILY_RANGE[1]:
        # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –Ω—É–∂–Ω–æ —É–º–µ—Ä–∏—Ç—å
        excess = current_pct - TARGET_DAILY_RANGE[1]
        target = -excess / estimated_trades_left
        return max(target, -MAX_SINGLE_TRADE_PCT)
    else:
        # –í –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã, –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
        return random.uniform(-0.5, 0.8)


def draw_candlestick_chart(candles, entry_idx, exit_idx, trade_id, direction):
    import matplotlib.pyplot as plt
    import matplotlib.dates as mdates
    import pandas as pd

    df = pd.DataFrame(candles)
    df.index = pd.DatetimeIndex(df["time"])
    df = df[["open", "high", "low", "close"]].astype(float)

    entry_price = df.iloc[entry_idx]["close"]
    exit_price = df.iloc[exit_idx]["close"]
    entry_time = df.index[entry_idx]
    exit_time = df.index[exit_idx]

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(df.index, df["close"], color="lightblue", linewidth=1.5)

    ax.axhline(entry_price, linestyle="--", color="lime", linewidth=1, alpha=0.7)
    ax.axhline(exit_price, linestyle="--", color="red", linewidth=1, alpha=0.7)

    ax.plot(entry_time, entry_price, marker='o', color='lime', markersize=8)
    ax.plot(exit_time, exit_price, marker='o', color='red', markersize=8)

    ax.set_title(f"Tradient AI Trade ‚Äî {direction}", fontsize=14, weight='bold', color='white', pad=15)
    ax.set_ylabel("–¶–µ–Ω–∞ (USDT)", color='white')
    ax.grid(True, linestyle="--", alpha=0.3)

    ax.tick_params(colors='gray')
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
    plt.xticks(rotation=45)

    fig.patch.set_facecolor('black')
    ax.set_facecolor('black')

    plt.tight_layout()
    path = os.path.join(CHARTS_DIR, f"{trade_id}.png")
    os.makedirs(os.path.dirname(path), exist_ok=True)
    plt.savefig(path, dpi=200)
    plt.close()
    return path


def find_suitable_trade(target_pct, should_profit):
    """–ò—â–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–¥–µ–ª–∫—É —Å –Ω—É–∂–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    global _last_ticker

    for attempt in range(50):  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–∫–µ—Ä (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π)
        tickers_pool = [t for t in TICKERS if t != _last_ticker]
        ticker = random.choice(tickers_pool) if tickers_pool else random.choice(TICKERS)

        exchange = random.choice(EXCHANGES)
        symbol = ticker.replace("/", "")

        try:
            candles = get_candles(symbol=symbol, interval="15m", limit=96)
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}: {e}")
            continue

        if len(candles) < 50:
            continue

        # –°–ª—É—á–∞–π–Ω—ã–µ —Ç–æ—á–∫–∏ –≤—Ö–æ–¥–∞ –∏ –≤—ã—Ö–æ–¥–∞
        entry_idx = random.randint(5, len(candles) - 20)
        exit_idx = entry_idx + random.randint(3, min(25, len(candles) - entry_idx - 1))

        entry = candles[entry_idx]
        exit = candles[exit_idx]

        for direction in ["LONG", "SHORT"]:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if direction == "LONG":
                pct = ((exit["close"] - entry["close"]) / entry["close"]) * 100
            else:
                pct = ((entry["close"] - exit["close"]) / entry["close"]) * 100

            is_profitable = pct > 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
            if abs(pct) < MIN_VOLATILITY_PCT:
                continue

            if abs(pct) > MAX_SINGLE_TRADE_PCT:
                continue

            if should_profit != is_profitable:
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–∏–∑–æ—Å—Ç—å –∫ —Ü–µ–ª–µ–≤–æ–º—É –ø—Ä–æ—Ü–µ–Ω—Ç—É
            if target_pct is not None:
                diff = abs(pct - target_pct)
                if diff > 1.0:  # –î–æ–ø—É—Å–∫ ¬±1%
                    continue

            _last_ticker = ticker
            return {
                'ticker': ticker,
                'exchange': exchange,
                'direction': direction,
                'entry_idx': entry_idx,
                'exit_idx': exit_idx,
                'entry_price': entry["close"],
                'exit_price': exit["close"],
                'result_pct': round(pct, 2),
                'result_usd': round(pct / 100 * 500, 2),
                'entry_time': entry["time"],
                'exit_time': exit["time"],
                'is_profitable': is_profitable,
                'candles': candles
            }

    return None


def generate_fake_trade():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–∞"""
    db = SessionLocal()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        stats = calculate_daily_stats(db)

        logger.info(
            f"[TRADE] üìä –î–µ–Ω—å: {stats['total_pct']:.2f}%, —Å–¥–µ–ª–æ–∫: {stats['total_trades']}, –≤–∏–Ω—Ä–µ–π—Ç: {stats['winrate']:.1%}")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–ª–µ–¥—É—é—â–µ–π —Å–¥–µ–ª–∫–∏
        should_profit = should_be_profitable(stats)
        target_pct = calculate_target_pct(stats)

        if target_pct is None:
            logger.info("[TRADE] ‚è∞ –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return None

        logger.info(f"[TRADE] üéØ –¶–µ–ª—å: {target_pct:.2f}%, –ø—Ä–∏–±—ã–ª—å: {should_profit}")

        # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–¥–µ–ª–∫—É
        trade_data = find_suitable_trade(target_pct, should_profit)

        if not trade_data:
            logger.warning("[TRADE] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–¥–µ–ª–∫—É")
            return None

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
        trade = Trade(
            ticker=trade_data['ticker'],
            exchange=trade_data['exchange'],
            direction=trade_data['direction'],
            entry_price=trade_data['entry_price'],
            exit_price=trade_data['exit_price'],
            result_pct=trade_data['result_pct'],
            result_usd=trade_data['result_usd'],
            entry_time=trade_data['entry_time'],
            exit_time=trade_data['exit_time'],
            is_profitable=trade_data['is_profitable'],
        )

        db.add(trade)
        db.commit()
        db.refresh(trade)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫
        try:
            chart_path = draw_candlestick_chart(
                trade_data['candles'],
                trade_data['entry_idx'],
                trade_data['exit_idx'],
                trade.id,
                trade_data['direction']
            )
            trade.chart_path = chart_path
            db.commit()
        except Exception as e:
            logger.error(f"[TRADE] ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        new_total = stats['total_pct'] + trade_data['result_pct']
        logger.success(
            f"[TRADE] ‚úÖ ID={trade.id} | {trade_data['ticker']} | {trade_data['direction']} | "
            f"{trade_data['result_pct']:.2f}% | –î–µ–Ω—å: {new_total:.2f}%"
        )

        return trade.id

    except Exception as e:
        logger.error(f"[TRADE] ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        db.rollback()
        return None
    finally:
        db.close()