import random
import os
from datetime import datetime, timedelta, time as dtime
from sqlalchemy import func
from app.core.utils.binance import get_candles
from app.models.trades import Trade
from app.core.db import SessionLocal
from app.core.logger import logger

CHARTS_DIR = "static/trade_charts"
TICKERS = [
    "BTC/USDT", "ETH/USDT", "SOL/USDT", "OP/USDT", "TON/USDT", "ARB/USDT",
    "MATIC/USDT", "SUI/USDT", "AVAX/USDT", "APT/USDT", "INJ/USDT", "LDO/USDT",
    "LINK/USDT", "RNDR/USDT", "TIA/USDT", "NEAR/USDT"
]
EXCHANGES = ["Binance", "Bybit", "OKX"]

EXCHANGE_COLORS = {
    "Binance": "üü°",
    "Bybit": "üü†",
    "OKX": "‚ö´Ô∏è",
}

MIN_VOLATILITY_PCT = 0.3   # –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π % —Å–¥–µ–ª–∫–∏
_last_ticker = None

def calculate_winrate(db):
    total = db.query(Trade).count()
    profitable = db.query(Trade).filter(Trade.is_profitable == True).count()
    if total == 0:
        return 0.0
    return profitable / total

def decide_profit(winrate):
    """
    –ö–æ–≥–¥–∞ –¥–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å —É–∂–µ –≤ [2%, 5%],
    —Ä–µ—à–∞–µ–º, –¥–µ–ª–∞—Ç—å –ª–∏ –ø—Ä–∏–±—ã–ª—å–Ω—É—é —Å–¥–µ–ª–∫—É, –æ—Ä–∏–µ–Ω—Ç–∏—Ä—É—è—Å—å –Ω–∞ –≤–∏–Ω—Ä–µ–π—Ç.
    """
    if winrate < 0.85:
        return random.random() < 0.95
    elif winrate > 0.85:
        return random.random() < 0.25
    return random.random() < 0.80

def draw_candlestick_chart(candles, entry_idx, exit_idx, trade_id, direction):
    import matplotlib.pyplot as plt
    import matplotlib.dates as mdates
    import pandas as pd

    df = pd.DataFrame(candles)
    df.index = pd.DatetimeIndex(df["time"])
    df = df[["open", "high", "low", "close"]].astype(float)

    entry_price = df.iloc[entry_idx]["close"]
    exit_price = df.iloc[exit_idx]["close"]
    entry_time = df.index[entry_idx]
    exit_time = df.index[exit_idx]

    fig, ax = plt.subplots(figsize=(10, 6))
    ax.plot(df.index, df["close"], color="lightblue", linewidth=1.5)

    ax.axhline(entry_price, linestyle="--", color="lime", linewidth=1, alpha=0.7)
    ax.axhline(exit_price, linestyle="--", color="red", linewidth=1, alpha=0.7)

    ax.plot(entry_time, entry_price, marker='o', color='lime', markersize=8)
    ax.plot(exit_time, exit_price, marker='o', color='red', markersize=8)

    ax.set_title(f"Tradient AI Trade ‚Äî {direction}", fontsize=14, weight='bold', color='white', pad=15)
    ax.set_ylabel("–¶–µ–Ω–∞ (USDT)", color='white')
    ax.grid(True, linestyle="--", alpha=0.3)

    ax.tick_params(colors='gray')
    ax.xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
    plt.xticks(rotation=45)

    fig.patch.set_facecolor('black')
    ax.set_facecolor('black')

    plt.tight_layout()
    path = os.path.join(CHARTS_DIR, f"{trade_id}.png")
    os.makedirs(os.path.dirname(path), exist_ok=True)
    plt.savefig(path, dpi=200)
    plt.close()
    return path

def generate_fake_trade():
    """
    –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram –∏–¥—ë—Ç —Å
    ¬´—Å–ª—É—á–∞–π–Ω–æ–π¬ª –∑–∞–¥–µ—Ä–∂–∫–æ–π 20‚Äì50 –º–∏–Ω, –ø–æ—ç—Ç–æ–º—É –∑–¥–µ—Å—å –º—ã
    —Ä–∞—Å—á—ë—Ç—ã —Å—Ç—Ä–æ–∏–º –Ω–µ –Ω–∞ ¬´—Å–ª–æ—Ç—ã¬ª, –∞ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è –¥–æ –ø–æ–ª—É–Ω–æ—á–∏.
    """
    global _last_ticker

    # 1) –ë–µ—Ä—ë–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è (UTC+3), –Ω–∞—á–∞–ª–æ–º —Å—É—Ç–æ–∫ —Å—á–∏—Ç–∞–µ–º 00:00 (UTC+3)
    now = datetime.utcnow() + timedelta(hours=3)
    today = now.date()
    start_of_day = datetime.combine(today, dtime.min)
    end_of_day = datetime.combine(today + timedelta(days=1), dtime.min)

    logger.info(f"[FAKE_TRADE] ‚ñ∂Ô∏è –ó–∞–ø—É—â–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–π–¥–∞ –Ω–∞ {now.isoformat()}")

    db = SessionLocal()
    try:
        # --------------------------------------------
        # 2) –°—á–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–Ω–µ–≤–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (–≤ %)
        # --------------------------------------------
        current_day_profit = db.query(
            func.coalesce(func.sum(Trade.result_pct), 0.0)
        ).filter(Trade.created_at >= start_of_day, Trade.created_at <= now).scalar() or 0.0
        logger.info(f"[FAKE_TRADE] üìä –¢–µ–∫—É—â–∞—è –¥–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {current_day_profit:.2f}%")

        # --------------------------------------------
        # 3) –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –ø–æ–ª—É–Ω–æ—á–∏
        # --------------------------------------------
        seconds_until_end = (end_of_day - now).total_seconds()
        if seconds_until_end < 1:
            seconds_until_end = 1  # —á—Ç–æ–±—ã –Ω–µ –¥–µ–ª–∏—Ç—å –Ω–∞ –Ω–æ–ª—å

        # --------------------------------------------
        # 4) –í—ã—á–∏—Å–ª—è–µ–º, –Ω–∞—Å–∫–æ–ª—å–∫–æ ¬´–Ω–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç¬ª –¥–æ 2% –∏ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –º—ã ¬´–ø–µ—Ä–µ–±—Ä–∞–ª–∏¬ª 5%
        # --------------------------------------------
        needed_to_min = 2.0 - current_day_profit   # >0 => –Ω–∞–¥–æ ¬´–¥–æ–±–∞–≤–∏—Ç—å¬ª –¥–æ 2%
        needed_to_max = 5.0 - current_day_profit   # <0 => –º—ã —É–∂–µ –∑–∞ 5%

        # --------------------------------------------
        # 5) –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ¬´—Å—Ä–µ–¥–Ω–∏–π % –≤ —Å–µ–∫—É–Ω–¥—É¬ª:
        #    - –ï—Å–ª–∏ current < 2  ‚áí –Ω–∞–º –Ω—É–∂–Ω–æ avg_up_per_sec = needed_to_min / seconds_until_end  (>0)
        #    - –ï—Å–ª–∏ current > 5  ‚áí avg_down_per_sec = needed_to_max / seconds_until_end (<0)
        #    - –ï—Å–ª–∏ 2 ‚â§ current ‚â§ 5 ‚áí avg_target_per_sec –∫–∞–∫ –º–æ–∂–Ω–æ –±–ª–∏–∂–µ –∫ 0,
        #         –Ω–æ —á—É—Ç—å ¬´–ø–æ–¥–ø–∏—Ä–∞–µ–º¬ª –≥—Ä–∞–Ω–∏—Ü—ã (–≤–æ–∑—å–º—ë–º –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å avg ¬±, —á—Ç–æ–±—ã –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—Ç—å ¬´—Å–ª–∏—à–∫–æ–º –∂–∏—Ä–Ω—ã–µ¬ª —Å–¥–µ–ª–∫–∏).
        # --------------------------------------------
        if current_day_profit < 2.0:
            mode = "FORCE_PROFIT"
            avg_target_per_sec = needed_to_min / seconds_until_end  # > 0
        elif current_day_profit > 5.0:
            mode = "FORCE_LOSS"
            avg_target_per_sec = needed_to_max / seconds_until_end  # < 0
        else:
            mode = "RANDOM_BALANCE"
            # –ï—Å–ª–∏ –º—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ [2, 5], —Ç–æ avg_target_per_sec –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –æ—á–µ–Ω—å –º–∞–ª—ã–º —á–∏—Å–ª–æ–º,
            # –Ω–æ –≤—Å—ë –∂–µ –≤—ã—Å—Ç—É–ø–∏—Ç—å ¬´–±—É—Ñ–µ—Ä–æ–º¬ª –ø—Ä–∏ –æ—Ç—Å–µ–∏–≤–∞–Ω–∏–∏ ¬´—Å–ª–∏—à–∫–æ–º –∂–∏—Ä–Ω—ã—Ö¬ª —Å–¥–µ–ª–æ–∫:
            # –≤–æ–∑—å–º—ë–º min(|needed_to_min|, |needed_to_max|) / seconds_until_end:
            base = needed_to_min if needed_to_min > 0 else needed_to_max  # base –º–æ–∂–µ—Ç –±—ã—Ç—å + –∏–ª–∏ ‚àí, –±–ª–∏–∑–∫–æ –∫ 0
            avg_target_per_sec = base / seconds_until_end

        logger.info(
            f"[FAKE_TRADE] üîÑ –†–µ–∂–∏–º: {mode}, "
            f"avg_target_per_sec ‚âà {avg_target_per_sec:.8f} (—Å–µ–∫—É–Ω–¥ –¥–æ –∫–æ–Ω—Ü–∞ –¥–Ω—è: {seconds_until_end:.0f})"
        )

        # --------------------------------------------
        # 6) –°–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –ø—Ä–æ–π–¥—ë—Ç –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏?
        #    –¢—É—Ç –º—ã –µ–≥–æ –µ—â—ë –Ω–µ –∑–Ω–∞–µ–º (delay –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è trade),
        #    –ø–æ—ç—Ç–æ–º—É –ø–æ—Å—Ç—É–ø–∞–µ–º —Ç–∞–∫: –¥–ª—è ¬´FORCE¬ª —Ä–µ–∂–∏–º–æ–≤ –º—ã –∑–Ω–∞–µ–º avg_target_per_sec,
        #    –∏ –º–æ–∂–µ–º ¬´—Ü–µ–ª–∏—Ç—å—Å—è¬ª –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ avg_target_pct = avg_target_per_sec *
        #    typical_delay_secs. –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, typical_delay = 30 –º–∏–Ω = 1800 —Å–µ–∫
        #    (—ç—Ç–æ —Å—Ä–µ–¥–Ω–µ–µ –º–µ–∂–¥—É 20 –∏ 50).
        #    –î–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Ä–∏–º –∏—Ç–æ–≥–æ–≤—ã–π result_pct ¬± tolerance.
        # --------------------------------------------
        typical_delay_secs = 30 * 60  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        avg_target_pct = avg_target_per_sec * typical_delay_secs
        # –ï—Å–ª–∏ —Ä–µ–∂–∏–º RANDOM_BALANCE, avg_target_pct –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—á–µ–Ω—å –º–∞–ª—ã–º (‚àí0.001‚Ä¶+0.001 –∏ —Ç. –ø.)

        # --------------------------------------------
        # 7) –¢–µ–ø–µ—Ä—å –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –∑–∞ 20 –∏—Ç–µ—Ä–∞—Ü–∏–π ¬´–ø–æ–¥–æ–≥–Ω–∞—Ç—å¬ª pct ‚âà avg_target_pct,
        #    —Å —É—á—ë—Ç–æ–º:
        #      - –î–ª—è FORCE_PROFIT ‚áí is_profit=True
        #      - –î–ª—è FORCE_LOSS   ‚áí is_profit=False
        #      - –î–ª—è RANDOM_BALANCE ‚áí —Ä–µ—à–∞–µ–º –ø–æ vinrate –∏ –Ω–µ –¥–∞—ë–º ¬´–ø—Ä—ã–≥–Ω—É—Ç—å¬ª –Ω–∏–∂–µ 0% –∏ –≤—ã—à–µ 7%
        #      - –ê–±—Å–æ–ª—é—Ç–Ω–∞—è ¬´–∂–∏—Ä–Ω–æ—Å—Ç—å¬ª —Å–¥–µ–ª–∫–∏ (–æ—Ç—Å–µ–∫–∞–Ω–∏–µ –æ—á–µ–Ω—å –±–æ–ª—å—à–∏—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π)
        # --------------------------------------------
        for _ in range(20):
            tickers_pool = [t for t in TICKERS if t != _last_ticker]
            ticker = random.choice(tickers_pool) if tickers_pool else random.choice(TICKERS)
            _last_ticker = ticker

            exchange = random.choice(EXCHANGES)
            symbol = ticker.replace("/", "")
            candles = get_candles(symbol=symbol, interval="15m", limit=96)  # 96 —Å–≤–µ—á–µ–π = 24 —á

            if len(candles) < 96:
                logger.info(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω {ticker} ‚Äî –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–µ—á–µ–π ({len(candles)})")
                continue

            entry_idx = random.randint(5, len(candles) - 10)
            max_exit_range = min(30, len(candles) - entry_idx - 1)
            exit_idx = entry_idx + random.randint(5, max_exit_range)
            entry = candles[entry_idx]
            exit = candles[exit_idx]

            for direction in ["LONG", "SHORT"]:
                # –í—ã—á–∏—Å–ª—è–µ–º –±—É–¥–µ—Ç –ª–∏ profit
                is_profit = (exit["close"] > entry["close"]) if direction == "LONG" else (exit["close"] < entry["close"])
                pct = ((exit["close"] - entry["close"]) / entry["close"]) * 100
                if direction == "SHORT":
                    pct *= -1

                # –§–∏–ª—å—Ç—Ä—É–µ–º ¬´–º–µ–ª–∫—É—é¬ª –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
                if abs(pct) < MIN_VOLATILITY_PCT:
                    continue

                # -------------------------
                # FORCE_PROFIT: —Ç–æ–ª—å–∫–æ + —Å–¥–µ–ª–∫–∏,
                # –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–µ –±–æ–ª–µ–µ 3√ó avg_target_pct)
                # -------------------------
                if mode == "FORCE_PROFIT":
                    if not is_profit:
                        continue
                    # –ï—Å–ª–∏ avg_target_pct —Å–ª–∏—à–∫–æ–º –º–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.03%), —á—Ç–æ–±—ã –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ç—å +5%,
                    # –¥–æ–±–∞–≤–∏–º –±–∞—Ä—å–µ—Ä: max_allowed = max(abs(avg_target_pct)*3, MIN_VOLATILITY_PCT)
                    max_allowed = max(abs(avg_target_pct) * 3, MIN_VOLATILITY_PCT)
                    if pct > max_allowed:
                        continue

                # -------------------------
                # FORCE_LOSS: —Ç–æ–ª—å–∫–æ ‚àí —Å–¥–µ–ª–∫–∏,
                # –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º ¬´–∂–∏—Ä–Ω—ã–π¬ª —É–±—ã—Ç–æ–∫ (–Ω–µ –±–æ–ª–µ–µ 3√ó |avg_target_pct|)
                # -------------------------
                elif mode == "FORCE_LOSS":
                    if is_profit:
                        continue
                    max_allowed_loss = min(-abs(avg_target_pct) * 3, -MIN_VOLATILITY_PCT)
                    # pct –º–µ–Ω—å—à–µ, —á–µ–º max_allowed_loss (–±–æ–ª—å—à–∏–π –ø–æ –º–æ–¥—É–ª—é –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π) ‚áí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if pct < max_allowed_loss:
                        continue

                # -------------------------
                # RANDOM_BALANCE:
                # —Ä–µ—à–∞–µ–º –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É, —á—Ç–æ–±—ã –±—ã–ª profit/loss,
                # –Ω–æ –Ω–µ –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥ –∑–∞ 0% –∏ 7%,
                # –∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞–µ–º ¬´—á—Ä–µ–∑–º–µ—Ä–Ω—ã—Ö¬ª —Å–¥–µ–ª–æ–∫ (>|3√ó avg_target_pct|)
                # -------------------------
                else:
                    winrate = calculate_winrate(db)
                    want_profit = decide_profit(winrate)
                    if want_profit != is_profit:
                        continue

                    hypothetical = current_day_profit + pct
                    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Å–¥–µ–ª–∫–∏ —É–π–¥—ë–º –Ω–∏–∂–µ 0% –∏–ª–∏ –≤—ã—à–µ 7% ‚áí –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if hypothetical < 0.0 or hypothetical > 7.0:
                        continue

                    # –û–≥—Ä–∞–Ω–∏—á–∏–º ¬´–∂–∏—Ä–Ω–æ—Å—Ç—å¬ª —Å–¥–µ–ª–∫–∏:
                    threshold = max(abs(avg_target_pct) * 3, MIN_VOLATILITY_PCT)
                    if abs(pct) > threshold:
                        continue

                # –ï—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –≤—Å—ë –æ–∫ ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º trade
                trade = Trade(
                    ticker=ticker,
                    exchange=exchange,
                    direction=direction,
                    entry_price=entry["close"],
                    exit_price=exit["close"],
                    result_pct=round(pct, 2),
                    result_usd=round(pct / 100 * 500, 2),
                    entry_time=entry["time"],
                    exit_time=exit["time"],
                    is_profitable=(pct > 0),
                )
                try:
                    db.add(trade)
                    db.commit()
                    db.refresh(trade)
                except Exception as e:
                    logger.error(f"[TRADE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ —Ç—Ä–µ–π–¥–∞: {e}")
                    db.rollback()
                    continue

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–Ω–µ–≤–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                current_day_profit += pct
                logger.success(
                    f"[TRADE] üü¢ ID={trade.id} | {ticker} | {direction} | {pct:.2f}% | "
                    f"mode={mode} | now_day_profit={current_day_profit:.2f}%"
                )

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                path = draw_candlestick_chart(candles, entry_idx, exit_idx, trade.id, direction)
                try:
                    trade.chart_path = path
                    db.commit()
                except Exception as e:
                    logger.error(f"[TRADE] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chart_path: {e}")
                    db.rollback()

                return trade.id

        # –ï—Å–ª–∏ –∑–∞ 20 –ø–æ–ø—ã—Ç–æ–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–µ—Ä–Ω—ë–º None
        logger.warning("[TRADE] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–¥–µ–ª–∫—É –∑–∞ 20 –∏—Ç–µ—Ä–∞—Ü–∏–π.")
        return None

    finally:
        db.close()
