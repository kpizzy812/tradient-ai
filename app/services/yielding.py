from datetime import datetime, timedelta, time as dtime
from sqlalchemy import select, func
from app.models.trades import Trade
from app.models.daily_yield import DailyYield
from app.core.db import SessionLocal
from app.core.logger import logger


def get_trading_day_range(target_date=None):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–Ω—è (18:00 –ú–°–ö –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è - 18:00 –ú–°–ö —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è)
    """
    if target_date is None:
        # –î–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞
        now_msk = datetime.utcnow() + timedelta(hours=3)

        if now_msk.hour >= 18:
            # –ü–æ—Å–ª–µ 18:00 - –±–µ—Ä–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å
            target_date = now_msk.date()
        else:
            # –î–æ 18:00 - –±–µ—Ä–µ–º –≤—á–µ—Ä–∞—à–Ω–∏–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å
            target_date = (now_msk - timedelta(days=1)).date()

    # –¢–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å: —Å 18:00 –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è –¥–æ 18:00 —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è (UTC)
    start_utc = datetime.combine(target_date - timedelta(days=1), dtime(15, 0))  # 18:00 –ú–°–ö = 15:00 UTC
    end_utc = datetime.combine(target_date, dtime(15, 0))

    return start_utc, end_utc, target_date


def calculate_daily_yield_with_validation():
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å—É—Ç–æ—á–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
    """
    db = SessionLocal()
    try:
        start_utc, end_utc, date = get_trading_day_range()

        logger.info(f"[YIELD] üìÖ –†–∞—Å—á–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞ {date}")
        logger.info(f"[YIELD] ‚è∞ –î–∏–∞–ø–∞–∑–æ–Ω: {start_utc} ‚Üí {end_utc} (UTC)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
        existing = db.execute(
            select(DailyYield).where(DailyYield.date == date)
        ).scalar_one_or_none()

        if existing:
            logger.warning(f"[YIELD] ‚ö†Ô∏è –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ {date} —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–∞: {existing.base_yield}%")
            return existing.base_yield

        # –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É –≤—Å–µ—Ö —Ç—Ä–µ–π–¥–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
        trades_result = db.query(func.sum(Trade.result_pct)).filter(
            Trade.created_at >= start_utc,
            Trade.created_at < end_utc
        ).scalar()

        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        trades_count = db.query(Trade).filter(
            Trade.created_at >= start_utc,
            Trade.created_at < end_utc
        ).count()

        profitable_count = db.query(Trade).filter(
            Trade.created_at >= start_utc,
            Trade.created_at < end_utc,
            Trade.is_profitable == True
        ).count()

        yield_percent = round(float(trades_result or 0), 2)
        winrate = (profitable_count / trades_count * 100) if trades_count > 0 else 0

        logger.info(f"[YIELD] üìä –ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {trades_count}")
        logger.info(f"[YIELD] üíπ –ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö: {profitable_count} ({winrate:.1f}%)")
        logger.info(f"[YIELD] üí∞ –°—É–º–º–∞—Ä–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {yield_percent}%")

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        if trades_count == 0:
            logger.warning(f"[YIELD] ‚ö†Ô∏è –ù–µ—Ç —Å–¥–µ–ª–æ–∫ –∑–∞ {date}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0%")
        elif yield_percent < 1.0:
            logger.warning(f"[YIELD] ‚ö†Ô∏è –ù–∏–∑–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {yield_percent}% (–æ–∂–∏–¥–∞–µ—Ç—Å—è 2-5%)")
        elif yield_percent > 8.0:
            logger.warning(f"[YIELD] ‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {yield_percent}% (–æ–∂–∏–¥–∞–µ—Ç—Å—è 2-5%)")
        else:
            logger.success(f"[YIELD] ‚úÖ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ –Ω–æ—Ä–º–µ: {yield_percent}%")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        daily_yield = DailyYield(date=date, base_yield=yield_percent)
        db.add(daily_yield)
        db.commit()

        logger.success(f"[YIELD] ‚úÖ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ {date} –∑–∞–ø–∏—Å–∞–Ω–∞: {yield_percent}%")
        return yield_percent

    except Exception as e:
        logger.error(f"[YIELD] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {e}")
        db.rollback()
        return None
    finally:
        db.close()


def generate_and_record_daily_yield():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∑–∞–ø–∏—Å–∏ —Å—É—Ç–æ—á–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    """
    return calculate_daily_yield_with_validation()


def get_recent_yields(days=7):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    """
    db = SessionLocal()
    try:
        end_date = datetime.utcnow().date()
        start_date = end_date - timedelta(days=days)

        yields = db.query(DailyYield).filter(
            DailyYield.date >= start_date,
            DailyYield.date <= end_date
        ).order_by(DailyYield.date.desc()).all()

        return [(y.date, y.base_yield) for y in yields]

    finally:
        db.close()


def validate_system_health():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    """
    recent_yields = get_recent_yields(7)

    if not recent_yields:
        logger.error("[YIELD] ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π!")
        return False

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –¥–Ω—è
    recent_3days = recent_yields[:3]
    problems = []

    for date, yield_pct in recent_3days:
        if yield_pct < 1.5:
            problems.append(f"{date}: {yield_pct}% (—Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ)")
        elif yield_pct > 7.0:
            problems.append(f"{date}: {yield_pct}% (—Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ)")

    if problems:
        logger.warning(f"[YIELD] ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é: {problems}")
        return False

    avg_yield = sum(y[1] for y in recent_3days) / len(recent_3days)
    logger.info(f"[YIELD] ‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –∑–∞ 3 –¥–Ω—è: {avg_yield:.2f}%")
    return True