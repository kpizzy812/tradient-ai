# app/tasks/yield_finalizer.py - –ù–û–í–´–ô –§–ê–ô–õ
import asyncio
from datetime import datetime, time
import pytz
from app.core.config import settings
from app.core.logger import logger
from app.services.yield_finalization import finalize_daily_yield
from app.bot.handlers.yield_report import post_daily_yield

msk = pytz.timezone("Europe/Moscow")


class YieldFinalizer:
    def __init__(self, bot):
        self.bot = bot
        self.last_processed_date = None

    async def finalization_loop(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
        logger.info("üìä –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")

        while True:
            try:
                now_utc = datetime.utcnow()
                today_utc = now_utc.date()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
                if (now_utc.hour == settings.YIELD_TIME_UTC_HOUR and
                        0 <= now_utc.minute <= 5 and  # 5-–º–∏–Ω—É—Ç–Ω–æ–µ –æ–∫–Ω–æ
                        self.last_processed_date != today_utc):

                    self.last_processed_date = today_utc

                    now_msk = now_utc.replace(tzinfo=pytz.UTC).astimezone(msk)
                    logger.info(f"[{now_msk.strftime('%Y-%m-%d %H:%M')} –ú–°–ö] üöÄ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏...")

                    try:
                        # –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                        yield_pct = finalize_daily_yield()

                        if yield_pct is not None:
                            # –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç
                            success = await post_daily_yield(self.bot)

                            if success:
                                logger.success(f"‚úÖ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {yield_pct}%")
                            else:
                                logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞")
                        else:
                            logger.error("‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏")

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                        for admin_id in settings.ADMIN_TG_IDS:
                            try:
                                await self.bot.send_message(
                                    admin_id,
                                    f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏\n\n"
                                    f"–í—Ä–µ–º—è: {now_msk.strftime('%Y-%m-%d %H:%M')} –ú–°–ö\n"
                                    f"–û—à–∏–±–∫–∞: {e}"
                                )
                            except:
                                pass

                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
                await asyncio.sleep(5 * 60)