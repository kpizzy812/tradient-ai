# app/tasks/smart_trade_scheduler.py - –ù–û–í–´–ô –§–ê–ô–õ
import asyncio
from datetime import datetime
from app.services.smart_trade_generator import generate_smart_trade, get_current_day_stats, calculate_next_trade_delay
from app.bot.handlers.trades import post_last_trade
from app.core.logger import logger


class SmartTradeScheduler:
    def __init__(self, bot):
        self.bot = bot
        self.last_trade_time = None

    async def trade_generator_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–π–¥–æ–≤"""
        logger.info("ü§ñ –£–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç—Ä–µ–π–¥–æ–≤ –∑–∞–ø—É—â–µ–Ω")

        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                stats = get_current_day_stats()

                if not stats['is_active']:
                    logger.debug("[TRADE_SCHEDULER] –¢–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –∂–¥–µ–º...")
                    await asyncio.sleep(10 * 60)  # 10 –º–∏–Ω—É—Ç
                    continue

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–µ–π–¥
                trade_id = generate_smart_trade()

                if trade_id:
                    # –ü—É–±–ª–∏–∫—É–µ–º —Ç—Ä–µ–π–¥
                    try:
                        await post_last_trade(self.bot)
                        logger.info(f"[TRADE_SCHEDULER] –¢—Ä–µ–π–¥ #{trade_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
                        self.last_trade_time = datetime.utcnow()
                    except Exception as e:
                        logger.error(f"[TRADE_SCHEDULER] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–π–¥–∞
                delay = calculate_next_trade_delay(stats)

                if delay is None:
                    logger.info("[TRADE_SCHEDULER] –¢–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å –∑–∞–≤–µ—Ä—à–µ–Ω")
                    await asyncio.sleep(30 * 60)  # 30 –º–∏–Ω—É—Ç
                    continue

                logger.info(f"[TRADE_SCHEDULER] –°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–π–¥ —á–µ—Ä–µ–∑ {delay // 60} –º–∏–Ω—É—Ç")
                await asyncio.sleep(delay)

            except Exception as e:
                logger.error(f"[TRADE_SCHEDULER] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
                await asyncio.sleep(5 * 60)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ