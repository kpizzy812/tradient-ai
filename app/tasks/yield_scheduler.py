import asyncio
from datetime import datetime, time
import pytz
from app.core.config import settings
from app.core.logger import logger
from app.tasks.yield_distributor import distribute_full_yield

msk = pytz.timezone("Europe/Moscow")


class YieldScheduler:
    def __init__(self, bot):
        self.bot = bot
        self.last_processed_date = None

    async def yield_scheduler_loop(self):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        logger.info("üí∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")

        while True:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
                now_utc = datetime.utcnow()
                today_utc = now_utc.date()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–ø–æ UTC)
                if (now_utc.hour == settings.YIELD_TIME_UTC_HOUR and
                        0 <= now_utc.minute <= 5 and  # 5-–º–∏–Ω—É—Ç–Ω–æ–µ –æ–∫–Ω–æ
                        self.last_processed_date != today_utc):

                    self.last_processed_date = today_utc

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ú–°–ö –¥–ª—è –ª–æ–≥–æ–≤
                    now_msk = now_utc.replace(tzinfo=pytz.UTC).astimezone(msk)
                    logger.info(f"[{now_msk.strftime('%Y-%m-%d %H:%M')} –ú–°–ö] üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏...")

                    try:
                        # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
                        await distribute_full_yield(self.bot)
                        logger.success(f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏: {e}")

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ–± –æ—à–∏–±–∫–µ
                        for admin_id in settings.ADMIN_TG_IDS:
                            try:
                                await self.bot.send_message(
                                    admin_id,
                                    f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏\n\n"
                                    f"–í—Ä–µ–º—è: {now_msk.strftime('%Y-%m-%d %H:%M')} –ú–°–ö\n"
                                    f"–û—à–∏–±–∫–∞: {e}\n\n"
                                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /yield_users –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"
                                )
                            except:
                                pass

                else:
                    # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è
                    if now_utc.minute in [0, 30]:
                        now_msk = now_utc.replace(tzinfo=pytz.UTC).astimezone(msk)
                        logger.debug(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è. –°–µ–π—á–∞—Å: {now_msk.strftime('%H:%M')} –ú–°–ö")

                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è: {e}")
                await asyncio.sleep(5 * 60)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ