# app/tasks/improved_trade_scheduler.py

import asyncio
import random
from datetime import datetime, timedelta
import pytz
from app.services.trade_generator import generate_smart_trade, get_daily_progress_report
from app.services.yielding import (
    get_current_day_progress,
    emergency_yield_correction,
    generate_daily_yield_report
)
from app.bot.handlers.trades import post_last_trade
from app.core.logger import logger
from app.core.config import settings

msk = pytz.timezone("Europe/Moscow")


class SmartTradeScheduler:
    def __init__(self, bot):
        self.bot = bot
        self.last_trade_time = None
        self.correction_attempts = 0
        self.daily_stats = {}

    async def calculate_next_trade_delay(self):
        """
        –£–º–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–¥–µ–ª–∫–∏
        """
        progress = get_current_day_progress()

        if not progress or progress['status'] != 'active':
            return 30 * 60  # 30 –º–∏–Ω—É—Ç –µ—Å–ª–∏ –¥–µ–Ω—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω

        hours_left = progress['hours_left']
        current_yield = progress['yield']
        trades_count = progress['trades']

        # –ë–∞–∑–æ–≤–∞—è —á–∞—Å—Ç–æ—Ç–∞: 20-35 —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å = –ø—Ä–∏–º–µ—Ä–Ω–æ 1 —Å–¥–µ–ª–∫–∞ –≤ 40-70 –º–∏–Ω—É—Ç
        base_delay_minutes = random.randint(25, 65)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ —Å–∏—Ç—É–∞—Ü–∏–∏
        if hours_left <= 3:
            # –í –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞ —É—á–∞—â–∞–µ–º —Å–¥–µ–ª–∫–∏
            if current_yield < 2.0:
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–∞–ª–æ - –¥–µ–ª–∞–µ–º —á–∞—Å—Ç–æ
                base_delay_minutes = random.randint(15, 30)
            elif current_yield > 5.0:
                # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –º–Ω–æ–≥–æ - —Ä–µ–∂–µ
                base_delay_minutes = random.randint(45, 90)
            else:
                # –í –Ω–æ—Ä–º–µ - —É–º–µ—Ä–µ–Ω–Ω–æ
                base_delay_minutes = random.randint(20, 40)

        elif hours_left <= 6:
            # –í –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º—Å—è
            if current_yield < 1.5 or current_yield > 6.0:
                base_delay_minutes = random.randint(20, 45)

        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–¥–µ–ª–æ–∫ –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ø–∞—É–∑—ã
        if trades_count > 25 and hours_left > 8:
            base_delay_minutes += 20

        delay_seconds = base_delay_minutes * 60

        logger.info(
            f"[SCHEDULER] ‚è∞ –°–ª–µ–¥—É—é—â–∞—è —Å–¥–µ–ª–∫–∞ —á–µ—Ä–µ–∑ {base_delay_minutes} –º–∏–Ω "
            f"(–¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {current_yield:.2f}%, –æ—Å—Ç–∞–ª–æ—Å—å: {hours_left:.1f}—á)"
        )

        return delay_seconds

    async def smart_trade_loop(self):
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–¥–µ–ª–æ–∫ —Å —É–º–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        """
        logger.info("ü§ñ –£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Å–¥–µ–ª–æ–∫ –∑–∞–ø—É—â–µ–Ω")

        while True:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–¥–µ–ª–∫—É
                progress = get_current_day_progress()

                if not progress or progress['status'] != 'active':
                    logger.debug("[SCHEDULER] üìÖ –¢–æ—Ä–≥–æ–≤—ã–π –¥–µ–Ω—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω")
                    await asyncio.sleep(10 * 60)  # 10 –º–∏–Ω—É—Ç
                    continue

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É
                trade_id = generate_smart_trade()

                if trade_id:
                    # –ü—É–±–ª–∏–∫—É–µ–º —Å–¥–µ–ª–∫—É
                    try:
                        await post_last_trade(self.bot)
                        logger.success(f"[SCHEDULER] ‚úÖ –°–¥–µ–ª–∫–∞ #{trade_id} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
                        self.last_trade_time = datetime.utcnow()
                    except Exception as e:
                        logger.error(f"[SCHEDULER] ‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–¥–µ–ª–∫–∏: {e}")

                else:
                    logger.warning("[SCHEDULER] ‚ö†Ô∏è –°–¥–µ–ª–∫–∞ –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ —Å–ª–µ–¥—É—é—â–µ–π —Å–¥–µ–ª–∫–∏
                delay = await self.calculate_next_trade_delay()
                await asyncio.sleep(delay)

            except Exception as e:
                logger.error(f"[SCHEDULER] ‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Å–¥–µ–ª–æ–∫: {e}")
                await asyncio.sleep(5 * 60)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def correction_monitor(self):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
        """
        logger.info("üéØ –ú–æ–Ω–∏—Ç–æ—Ä –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞–ø—É—â–µ–Ω")

        while True:
            try:
                progress = get_current_day_progress()

                if not progress or progress['status'] != 'active':
                    await asyncio.sleep(15 * 60)  # 15 –º–∏–Ω—É—Ç
                    continue

                hours_left = progress['hours_left']
                current_yield = progress['yield']

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è
                needs_correction = False
                correction_type = None

                if hours_left <= 2:  # –ó–∞ 2 —á–∞—Å–∞ –¥–æ –∫–æ–Ω—Ü–∞
                    if current_yield < 1.8:
                        needs_correction = True
                        correction_type = "URGENT_PROFIT"
                    elif current_yield > 5.5:
                        needs_correction = True
                        correction_type = "URGENT_LOSS"
                elif hours_left <= 4:  # –ó–∞ 4 —á–∞—Å–∞ –¥–æ –∫–æ–Ω—Ü–∞
                    if current_yield < 1.5:
                        needs_correction = True
                        correction_type = "EARLY_PROFIT"
                    elif current_yield > 6.0:
                        needs_correction = True
                        correction_type = "EARLY_LOSS"

                if needs_correction and self.correction_attempts < 3:
                    logger.warning(
                        f"[CORRECTION] üö® –ù—É–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è {correction_type}: "
                        f"{current_yield:.2f}% –ø—Ä–∏ {hours_left:.1f}—á –¥–æ –∫–æ–Ω—Ü–∞"
                    )

                    success, message = emergency_yield_correction()
                    self.correction_attempts += 1

                    if success:
                        logger.success(f"[CORRECTION] ‚úÖ {message}")

                        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
                        for admin_id in settings.ADMIN_TG_IDS:
                            try:
                                await self.bot.send_message(
                                    admin_id,
                                    f"‚ö° –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏\n\n"
                                    f"–ë—ã–ª–æ: {current_yield:.2f}%\n"
                                    f"–í—Ä–µ–º—è –¥–æ –∫–æ–Ω—Ü–∞: {hours_left:.1f}—á\n"
                                    f"–î–µ–π—Å—Ç–≤–∏–µ: {message}"
                                )
                            except:
                                pass
                    else:
                        logger.error(f"[CORRECTION] ‚ùå {message}")

                await asyncio.sleep(20 * 60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 20 –º–∏–Ω—É—Ç

            except Exception as e:
                logger.error(f"[CORRECTION] ‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: {e}")
                await asyncio.sleep(10 * 60)

    async def daily_report_sender(self):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∞–º
        """
        logger.info("üìä –û—Ç–ø—Ä–∞–≤—â–∏–∫ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω")

        last_report_date = None

        while True:
            try:
                now_msk = datetime.now(msk)
                today = now_msk.date()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –≤ 17:30 –ú–°–ö (–∑–∞ 30 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è)
                if (now_msk.hour == 17 and 30 <= now_msk.minute <= 35 and
                        last_report_date != today):

                    last_report_date = today

                    report = generate_daily_yield_report()

                    for admin_id in settings.ADMIN_TG_IDS:
                        try:
                            await self.bot.send_message(
                                admin_id,
                                f"üìä **–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢**\n\n{report}",
                                parse_mode="Markdown"
                            )
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            except Exception as e:
                logger.error(f"[REPORTS] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤: {e}")
                await asyncio.sleep(5 * 60)


# –ù–æ–≤—ã–µ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
async def admin_force_trade_now(bot, admin_id, target_pct=None):
    """–°–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É —Å–µ–π—á–∞—Å —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ü–µ–ª–µ–≤—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º"""
    try:
        if target_pct is not None:
            from app.services.trade_generator import force_correction_trade
            trade_id = force_correction_trade(float(target_pct))
        else:
            trade_id = generate_smart_trade()

        if trade_id:
            await post_last_trade(bot)
            await bot.send_message(admin_id, f"‚úÖ –°–¥–µ–ª–∫–∞ #{trade_id} —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞")
        else:
            await bot.send_message(admin_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–¥–µ–ª–∫—É")

    except Exception as e:
        await bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞: {e}")


async def admin_day_status(bot, admin_id):
    """–ü–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è"""
    try:
        report, stats = get_daily_progress_report()

        await bot.send_message(
            admin_id,
            report,
            parse_mode="Markdown"
        )

    except Exception as e:
        await bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")


async def admin_force_correction(bot, admin_id):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏"""
    try:
        success, message = emergency_yield_correction()

        if success:
            await bot.send_message(admin_id, f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {message}")
        else:
            await bot.send_message(admin_id, f"‚ùå –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {message}")

    except Exception as e:
        await bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: {e}")


async def admin_system_health(bot, admin_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        from app.services.yielding import validate_yield_system, get_recent_yields

        is_healthy, health_status = validate_yield_system()
        recent = get_recent_yields(5)

        status_icon = "‚úÖ" if is_healthy else "‚ö†Ô∏è"

        report = (
            f"üè• **–ó–î–û–†–û–í–¨–ï –°–ò–°–¢–ï–ú–´** {status_icon}\n\n"
            f"üìä –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –¥–Ω–µ–π: {health_status.get('days_checked', 0)}\n"
            f"‚úÖ –î–Ω–µ–π –≤ –Ω–æ—Ä–º–µ: {health_status.get('good_days', 0)}\n"
            f"üìà –°—Ä–µ–¥–Ω—è—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {health_status.get('avg_yield', 0):.2f}%\n"
            f"üéØ –ò–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤—å—è: {health_status.get('health_score', 0):.1%}\n\n"
            f"**–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π:**\n"
        )

        for date, pct in recent:
            emoji = "‚úÖ" if 2.0 <= pct <= 5.0 else "‚ö†Ô∏è"
            report += f"{emoji} {date}: {pct}%\n"

        if health_status.get('problems'):
            report += f"\n**–ü—Ä–æ–±–ª–µ–º—ã:**\n"
            for problem in health_status['problems'][:3]:
                report += f"‚Ä¢ {problem}\n"

        await bot.send_message(admin_id, report, parse_mode="Markdown")

    except Exception as e:
        await bot.send_message(admin_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
async def start_improved_trading_system(bot):
    """
    –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–æ—Ä–≥–æ–≤–ª–∏
    """
    scheduler = SmartTradeScheduler(bot)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    tasks = [
        scheduler.smart_trade_loop(),
        scheduler.correction_monitor(),
        scheduler.daily_report_sender()
    ]

    logger.success("üöÄ –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∑–∞–ø—É—â–µ–Ω–∞")

    await asyncio.gather(*tasks)