from aiogram import Bot
from datetime import date, datetime
from sqlalchemy.orm import Session
from app.core.db import SessionLocal
from app.models.investments import Investment
from app.models.users import User
from app.models.income_log import IncomeLog
from app.core.config import settings
from app.services.logic import t
from app.core.logger import logger
import random
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import pytz

msk = pytz.timezone("Europe/Moscow")


async def distribute_full_yield(bot: Bot):
    """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    today = date.today()
    now_msk = datetime.now(msk)

    logger.info(f"[{today}] üí∞ –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏...")

    db: Session = SessionLocal()

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ (—Å–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è)
        investments = db.query(Investment).filter(
            Investment.is_active == True,
            Investment.created_at < datetime(today.year, today.month, today.day)
        ).all()

        if not investments:
            logger.warning(f"[{today}] ‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è")
            return

        logger.info(f"[{today}] üìä –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π: {len(investments)}")

        total_distributed = 0.0
        user_profits = {}  # {tg_id: {"lang": "ru", "total": 0.0, "pools": {...}}}

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é
        for inv in investments:
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—É–ª–∞
            coeff = settings.POOL_COEFFICIENTS.get(inv.pool_name, 1.0)
            yield_range = settings.POOL_YIELD_RANGES.get(inv.pool_name)

            if yield_range is None:
                logger.warning(f"[{today}] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—É–ª: {inv.pool_name}")
                continue

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –ø—É–ª–∞
            base_percent = random.uniform(*yield_range)
            final_percent = round(base_percent * coeff, 2)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = db.query(User).filter(User.id == inv.user_id).first()
            if not user:
                logger.warning(f"[{today}] ‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: user_id={inv.user_id}")
                continue

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥
            income = round(inv.amount_usd * final_percent / 100, 4)

            # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if user.tg_id not in user_profits:
                user_profits[user.tg_id] = {
                    "lang": user.lang,
                    "total": 0.0,
                    "pools": {}
                }

            user_profits[user.tg_id]["total"] += income

            if inv.pool_name not in user_profits[user.tg_id]["pools"]:
                user_profits[user.tg_id]["pools"][inv.pool_name] = {
                    "percent": final_percent,
                    "income": 0.0
                }
            user_profits[user.tg_id]["pools"][inv.pool_name]["income"] += income

            # –ù–∞—á–∏—Å–ª—è–µ–º –¥–æ—Ö–æ–¥ (–∞–≤—Ç–æ—Ä–µ–∏–Ω–≤–µ—Å—Ç –∏–ª–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å)
            if user.auto_reinvest_flags and user.auto_reinvest_flags.get(inv.pool_name):
                # –ê–≤—Ç–æ—Ä–µ–∏–Ω–≤–µ—Å—Ç
                inv.amount_usd += income
                inv.reinvested = (inv.reinvested or 0) + income
                logger.debug(f"[{today}] ‚ôªÔ∏è –ê–≤—Ç–æ—Ä–µ–∏–Ω–≤–µ—Å—Ç: user_id={user.id}, pool={inv.pool_name}, +{income}")
            else:
                # –ù–∞ –±–∞–ª–∞–Ω—Å
                user.profit_usd += income
                logger.debug(f"[{today}] üí∞ –ù–∞ –±–∞–ª–∞–Ω—Å: user_id={user.id}, +{income}")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –¥–æ—Ö–æ–¥–æ–≤
            income_log = IncomeLog(
                user_id=user.id,
                amount_usd=income,
                pool_name=inv.pool_name,
                date=today
            )
            db.add(income_log)

            total_distributed += income

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.commit()

        logger.success(
            f"[{today}] ‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_profits)}, —Å—É–º–º–∞: ${total_distributed:.2f}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        notifications_sent = 0
        for tg_id, info in user_profits.items():
            try:
                await send_yield_notification(bot, tg_id, info, today)
                notifications_sent += 1
            except Exception as e:
                logger.warning(f"[{today}] ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {tg_id}: {e}")

        logger.info(f"[{today}] üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notifications_sent}/{len(user_profits)}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await send_admin_summary(bot, today, len(user_profits), total_distributed, notifications_sent)

    except Exception as e:
        logger.error(f"[{today}] ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏: {e}")
        db.rollback()
        raise
    finally:
        db.close()


async def send_yield_notification(bot: Bot, tg_id: int, info: dict, today: date):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    lang = info["lang"]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ –ø—É–ª–∞–º
    pools_lines = []
    for pool_name, details in info["pools"].items():
        percent_str = f"{details['percent']:.2f}%"
        income_str = f"${details['income']:.2f}"
        pools_lines.append(f"{pool_name}: {percent_str} ({income_str})")

    pools_text = "\n".join(pools_lines)

    # –ó–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –≤ —Ç–µ–∫—Å—Ç–µ
    text = t("yield_notify", lang).replace("{amount}", pools_text)

    # –ö–Ω–æ–ø–∫–∞ —Ä–µ–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=t("reinvest_button", lang),
                    callback_data="reinvest_start"
                )
            ]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
    photo_url = "https://i.ibb.co/mrrB7XWh/Chat-GPT-Image-31-2025-15-35-19.jpg"
    await bot.send_photo(
        chat_id=tg_id,
        photo=photo_url,
        caption=text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


async def send_admin_summary(bot: Bot, today: date, users_count: int, total_amount: float, notifications_sent: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–¥–∫—É –∞–¥–º–∏–Ω–∞–º"""
    now_msk = datetime.now(msk)
    
    summary = (
        f"üí∞ <b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
        f"üìÖ <b>–î–∞—Ç–∞:</b> {today.strftime('%d.%m.%Y')}\n"
        f"üïê <b>–í—Ä–µ–º—è:</b> {now_msk.strftime('%H:%M')} –ú–°–ö\n"
        f"üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> {users_count}\n"
        f"üíµ <b>–í—Å–µ–≥–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ:</b> ${total_amount:.2f}\n"
        f"üì± <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> {notifications_sent}/{users_count}\n"
        f"üìä <b>–°—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞:</b> ${total_amount / users_count:.2f}" if users_count > 0 else ""
    )

    for admin_id in settings.ADMIN_TG_IDS:
        try:
            await bot.send_message(admin_id, summary, parse_mode="HTML")
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–≤–æ–¥–∫–∏ –∞–¥–º–∏–Ω—É {admin_id}: {e}")